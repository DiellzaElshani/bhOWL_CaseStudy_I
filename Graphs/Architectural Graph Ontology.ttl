@prefix : <https://schema.org/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@base   <https://schema.org> .

<https://schema.org> rdf:type owl:Ontology;
                          dc:title "Timber Bulding Ontology"@en;
                          dc:description "Timber Bulding Ontology"@en.


#################################################################
#    Annotation Properties
#################################################################

###  http://purl.org/dc/elements/1.1/#description
<http://purl.org/dc/elements/1.1/#description> rdf:type owl:AnnotationProperty .
###  http://purl.org/dc/elements/1.1/#title
<http://purl.org/dc/elements/1.1/#title> rdf:type owl:AnnotationProperty .


#################################################################
#    Datatypes
#################################################################


<https://github.com/BHoM/RDF_Prototypes/blob/main/RDF_oM/Base64JsonSerialized.cs> rdf:type rdfs:Datatype ;
rdfs:label "Base64JsonSerialized"@en .


#################################################################
#    Classes
#################################################################

# TBoxSettings:
# CustomObjectTypesBaseAddress: https://schema.org


### https://schema.org/ArchitecturalBuilding
:ArchitecturalBuilding rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.CustomObject;
		rdfs:label "Architectural Building"@en .

### https://github.com/BHoM/BHoM/blob/main/BHoM/Interface/IObject.cs
:BH.oM.Base.IObject rdf:type owl:Class;
		rdfs:label "IObject"@en .

### https://github.com/BHoM/BHoM/blob/main/BHoM/Interface/IBHoMObject.cs
:BH.oM.Base.IBHoMObject rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IObject;
		rdfs:label "IBHoMObject"@en .

### https://github.com/BHoM/BHoM/blob/main/BHoM/CustomObject.cs
:BH.oM.Base.CustomObject rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "CustomObject"@en .

### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs
:BH.oM.Base.BHoMObject rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IBHoMObject;
		rdfs:label "BHoMObject"@en .

### https://github.com/BHoM/BHoM/blob/main/Spatial_oM/SettingOut/Level.cs
:BH.oM.Spatial.SettingOut.Level rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Level"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/Column.cs
:BH.oM.Physical.Elements.Column rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.Elements.IFramingElement;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Column"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/IFramingElement.cs
:BH.oM.Physical.Elements.IFramingElement rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.IPhysical;
		rdfs:subClassOf :BH.oM.Dimensional.IElement1D;
		rdfs:subClassOf :BH.oM.Dimensional.IElementM;
		rdfs:label "IFramingElement"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/IPhysical.cs
:BH.oM.Physical.IPhysical rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IBHoMObject;
		rdfs:label "IPhysical"@en .

### https://github.com/BHoM/BHoM/blob/main/Dimensional_oM/IElement1D.cs
:BH.oM.Dimensional.IElement1D rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Dimensional.IElement;
		rdfs:label "IElement1D"@en .

### https://github.com/BHoM/BHoM/blob/main/Dimensional_oM/IElement.cs
:BH.oM.Dimensional.IElement rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IObject;
		rdfs:label "IElement"@en .

### https://github.com/BHoM/BHoM/blob/main/Dimensional_oM/IElementM.cs
:BH.oM.Dimensional.IElementM rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IObject;
		rdfs:label "IElementM"@en .

### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Curve/ICurve.cs
:BH.oM.Geometry.ICurve rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Geometry.IGeometry;
		rdfs:subClassOf :BH.oM.Dimensional.IElement1D;
		rdfs:label "ICurve"@en .

### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Interface/IGeometry.cs
:BH.oM.Geometry.IGeometry rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IObject;
		rdfs:label "IGeometry"@en .

### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Curve/Line.cs
:BH.oM.Geometry.Line rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Geometry.ICurve;
		rdfs:label "Line"@en .

### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Vector/Point.cs
:BH.oM.Geometry.Point rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Geometry.IGeometry;
		rdfs:subClassOf :BH.oM.Dimensional.IElement0D;
		rdfs:label "Point"@en .

### https://github.com/BHoM/BHoM/blob/main/Dimensional_oM/IElement0D.cs
:BH.oM.Dimensional.IElement0D rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Dimensional.IElement;
		rdfs:label "IElement0D"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/FramingProperties/IFramingElementProperty.cs
:BH.oM.Physical.FramingProperties.IFramingElementProperty rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IBHoMObject;
		rdfs:label "IFramingElementProperty"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/FramingProperties/ConstantFramingProperty.cs
:BH.oM.Physical.FramingProperties.ConstantFramingProperty rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.FramingProperties.IFramingElementProperty;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "ConstantFramingProperty"@en .

### https://github.com/BHoM/BHoM/blob/main/Spatial_oM/ShapeProfiles/IProfile.cs
:BH.oM.Spatial.ShapeProfiles.IProfile rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IBHoMObject;
		rdfs:label "IProfile"@en .

### https://github.com/BHoM/BHoM/blob/main/Spatial_oM/ShapeProfiles/FreeFormProfile.cs
:BH.oM.Spatial.ShapeProfiles.FreeFormProfile rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Spatial.ShapeProfiles.IProfile;
		rdfs:subClassOf :BH.oM.Base.IImmutable;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "FreeFormProfile"@en .

### https://github.com/BHoM/BHoM/blob/main/BHoM/Interface/IImmutable.cs
:BH.oM.Base.IImmutable rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IObject;
		rdfs:label "IImmutable"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Materials/Material.cs
:BH.oM.Physical.Materials.Material rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.IPhysical;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Material"@en .

### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs
:BH.oM.Environment.MaterialFragments.SolidMaterial rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Environment.MaterialFragments.IEnvironmentMaterial;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "SolidMaterial"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Materials/IDensityProvider.cs
:BH.oM.Physical.Materials.IDensityProvider rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.Materials.IMaterialProperties;
		rdfs:label "IDensityProvider"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Materials/IMaterialProperties.cs
:BH.oM.Physical.Materials.IMaterialProperties rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IBHoMObject;
		rdfs:label "IMaterialProperties"@en .

### https://github.com/BHoM/BHoM/blob/main/BHoM/Interface/IFragment.cs
:BH.oM.Base.IFragment rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IObject;
		rdfs:label "IFragment"@en .

### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/IEnvironmentMaterial.cs
:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IFragment;
		rdfs:subClassOf :BH.oM.Physical.Materials.IDensityProvider;
		rdfs:label "IEnvironmentMaterial"@en .

### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs
:BH.oM.Structure.MaterialFragments.Timber rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Structure.MaterialFragments.IOrthotropic;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Timber"@en .

### https://github.com/BHoM/BHoM/blob/main/Structure_oM/IProperty.cs
:BH.oM.Structure.IProperty rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IObject;
		rdfs:label "IProperty"@en .

### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/IMaterialFragment.cs
:BH.oM.Structure.MaterialFragments.IMaterialFragment rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IFragment;
		rdfs:subClassOf :BH.oM.Structure.IProperty;
		rdfs:subClassOf :BH.oM.Physical.Materials.IDensityProvider;
		rdfs:label "IMaterialFragment"@en .

### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/IOrthotropic.cs
:BH.oM.Structure.MaterialFragments.IOrthotropic rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Structure.MaterialFragments.IMaterialFragment;
		rdfs:label "IOrthotropic"@en .

### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Vector/Vector.cs
:BH.oM.Geometry.Vector rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Geometry.IGeometry;
		rdfs:label "Vector"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/Floor.cs
:BH.oM.Physical.Elements.Floor rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.Elements.ISurface;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Floor"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/ISurface.cs
:BH.oM.Physical.Elements.ISurface rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.IPhysical;
		rdfs:subClassOf :BH.oM.Dimensional.IElement2D;
		rdfs:subClassOf :BH.oM.Dimensional.IElementM;
		rdfs:label "ISurface"@en .

### https://github.com/BHoM/BHoM/blob/main/Dimensional_oM/IElement2D.cs
:BH.oM.Dimensional.IElement2D rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Dimensional.IElement;
		rdfs:label "IElement2D"@en .

### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Surface/ISurface.cs
:BH.oM.Geometry.ISurface rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Geometry.IGeometry;
		rdfs:label "ISurface"@en .

### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Surface/PlanarSurface.cs
:BH.oM.Geometry.PlanarSurface rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Geometry.ISurface;
		rdfs:subClassOf :BH.oM.Base.IImmutable;
		rdfs:subClassOf :BH.oM.Dimensional.IElement2D;
		rdfs:label "PlanarSurface"@en .

### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Curve/PolyCurve.cs
:BH.oM.Geometry.PolyCurve rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Geometry.IPolyCurve;
		rdfs:label "PolyCurve"@en .

### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/IPolyCurve.cs
:BH.oM.Geometry.IPolyCurve rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Geometry.ICurve;
		rdfs:label "IPolyCurve"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/IConstruction.cs
:BH.oM.Physical.Constructions.IConstruction rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IBHoMObject;
		rdfs:label "IConstruction"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs
:BH.oM.Physical.Constructions.Construction rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.Constructions.IConstruction;
		rdfs:subClassOf :BH.oM.Physical.IPhysical;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Construction"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Layer.cs
:BH.oM.Physical.Constructions.Layer rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.IPhysical;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Layer"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/Wall.cs
:BH.oM.Physical.Elements.Wall rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.Elements.ISurface;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Wall"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/Window.cs
:BH.oM.Physical.Elements.Window rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.Elements.IOpening;
		rdfs:subClassOf :BH.oM.Dimensional.IElementM;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Window"@en .

### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/IOpening.cs
:BH.oM.Physical.Elements.IOpening rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Physical.IPhysical;
		rdfs:subClassOf :BH.oM.Dimensional.IElement2D;
		rdfs:label "IOpening"@en .

### https://github.com/BHoM/BHoM/blob/main/Architecture_oM/Elements/Room.cs
:BH.oM.Architecture.Elements.Room rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Analytical.Elements.IRegion;
		rdfs:subClassOf :BH.oM.Base.BHoMObject;
		rdfs:label "Room"@en .

### https://github.com/BHoM/BHoM/blob/main/Analytical_oM/IAnalytical.cs
:BH.oM.Analytical.IAnalytical rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IObject;
		rdfs:label "IAnalytical"@en .

### https://github.com/BHoM/BHoM/blob/main/Analytical_oM/Elements/IRegion.cs
:BH.oM.Analytical.Elements.IRegion rdf:type owl:Class;
		rdfs:subClassOf :BH.oM.Base.IBHoMObject;
		rdfs:subClassOf :BH.oM.Analytical.IAnalytical;
		rdfs:subClassOf :BH.oM.Dimensional.IElement2D;
		rdfs:label "IRegion"@en .


#################################################################
#    Object Properties
#################################################################


### https://schema.org/ArchitecturalBuilding#hasLevel
:ArchitecturalBuilding.hasLevel rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasLevel"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/IFramingElement.cs#L42
:BH.oM.Physical.Elements.IFramingElement.Location rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Elements.IFramingElement ;
rdfs:range :BH.oM.Geometry.ICurve ;
rdfs:label "Location (BH.oM.Physical.Elements.IFramingElement.Location)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Curve/Line.cs#L35
:BH.oM.Geometry.Line.Start rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Geometry.Line ;
rdfs:range :BH.oM.Geometry.Point ;
rdfs:label "Start (BH.oM.Geometry.Line.Start)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Curve/Line.cs#L37
:BH.oM.Geometry.Line.End rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Geometry.Line ;
rdfs:range :BH.oM.Geometry.Point ;
rdfs:label "End (BH.oM.Geometry.Line.End)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/IFramingElement.cs#L43
:BH.oM.Physical.Elements.IFramingElement.Property rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Elements.IFramingElement ;
rdfs:range :BH.oM.Physical.FramingProperties.IFramingElementProperty ;
rdfs:label "Property (BH.oM.Physical.Elements.IFramingElement.Property)"@en .


### https://github.com/BHoM/BHoM/blob/main/Spatial_oM/ShapeProfiles/IProfile.cs#L36
:BH.oM.Spatial.ShapeProfiles.IProfile.Edges rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Spatial.ShapeProfiles.IProfile ;
rdfs:range :rdf:list ;
rdfs:label "Edges (BH.oM.Spatial.ShapeProfiles.IProfile.Edges)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/FramingProperties/ConstantFramingProperty.cs#L41
:BH.oM.Physical.FramingProperties.ConstantFramingProperty.Profile rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.FramingProperties.ConstantFramingProperty ;
rdfs:range :BH.oM.Spatial.ShapeProfiles.IProfile ;
rdfs:label "Profile (BH.oM.Physical.FramingProperties.ConstantFramingProperty.Profile)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Materials/Material.cs#L40
:BH.oM.Physical.Materials.Material.Properties rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Materials.Material ;
rdfs:range :rdf:list ;
rdfs:label "Properties (BH.oM.Physical.Materials.Material.Properties)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/FramingProperties/ConstantFramingProperty.cs#L43
:BH.oM.Physical.FramingProperties.ConstantFramingProperty.Material rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.FramingProperties.ConstantFramingProperty ;
rdfs:range :BH.oM.Physical.Materials.Material ;
rdfs:label "Material (BH.oM.Physical.FramingProperties.ConstantFramingProperty.Material)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/IOrthotropic.cs#L40
:BH.oM.Structure.MaterialFragments.IOrthotropic.YoungsModulus rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.IOrthotropic ;
rdfs:range :BH.oM.Geometry.Vector ;
rdfs:label "YoungsModulus (BH.oM.Structure.MaterialFragments.IOrthotropic.YoungsModulus)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/IOrthotropic.cs#L44
:BH.oM.Structure.MaterialFragments.IOrthotropic.PoissonsRatio rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.IOrthotropic ;
rdfs:range :BH.oM.Geometry.Vector ;
rdfs:label "PoissonsRatio (BH.oM.Structure.MaterialFragments.IOrthotropic.PoissonsRatio)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/IOrthotropic.cs#L48
:BH.oM.Structure.MaterialFragments.IOrthotropic.ThermalExpansionCoeff rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.IOrthotropic ;
rdfs:range :BH.oM.Geometry.Vector ;
rdfs:label "ThermalExpansionCoeff (BH.oM.Structure.MaterialFragments.IOrthotropic.ThermalExpansionCoeff)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/IOrthotropic.cs#L52
:BH.oM.Structure.MaterialFragments.IOrthotropic.ShearModulus rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.IOrthotropic ;
rdfs:range :BH.oM.Geometry.Vector ;
rdfs:label "ShearModulus (BH.oM.Structure.MaterialFragments.IOrthotropic.ShearModulus)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs
:BH.oM.Structure.MaterialFragments.Timber.YoungsModulusMean rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range :BH.oM.Geometry.Vector ;
rdfs:label "YoungsModulusMean (BH.oM.Structure.MaterialFragments.Timber.YoungsModulusMean)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs
:BH.oM.Structure.MaterialFragments.Timber.ShearModulusMean rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range :BH.oM.Geometry.Vector ;
rdfs:label "ShearModulusMean (BH.oM.Structure.MaterialFragments.Timber.ShearModulusMean)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Materials/Material.cs#L40
:BH.oM.Physical.Materials.Material.Properties rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Materials.Material ;
rdfs:range :rdf:Seq ;
rdfs:label "Properties (BH.oM.Physical.Materials.Material.Properties)"@en .


### https://schema.org/ArchitecturalBuilding#hasColumn
:ArchitecturalBuilding.hasColumn rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasColumn"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/ISurface.cs#L43
:BH.oM.Physical.Elements.ISurface.Location rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Elements.ISurface ;
rdfs:range :BH.oM.Geometry.ISurface ;
rdfs:label "Location (BH.oM.Physical.Elements.ISurface.Location)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Surface/PlanarSurface.cs#L39
:BH.oM.Geometry.PlanarSurface.ExternalBoundary rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Geometry.PlanarSurface ;
rdfs:range :BH.oM.Geometry.ICurve ;
rdfs:label "ExternalBoundary (BH.oM.Geometry.PlanarSurface.ExternalBoundary)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Curve/PolyCurve.cs#L36
:BH.oM.Geometry.PolyCurve.Curves rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Geometry.PolyCurve ;
rdfs:range :rdf:Seq ;
rdfs:label "Curves (BH.oM.Geometry.PolyCurve.Curves)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Curve/PolyCurve.cs#L36
:BH.oM.Geometry.PolyCurve.Curves rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Geometry.PolyCurve ;
rdfs:range :rdf:Seq ;
rdfs:label "Curves (BH.oM.Geometry.PolyCurve.Curves)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Surface/PlanarSurface.cs#L42
:BH.oM.Geometry.PlanarSurface.InternalBoundaries rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Geometry.PlanarSurface ;
rdfs:range :rdf:Seq ;
rdfs:label "InternalBoundaries (BH.oM.Geometry.PlanarSurface.InternalBoundaries)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Surface/PlanarSurface.cs#L42
:BH.oM.Geometry.PlanarSurface.InternalBoundaries rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Geometry.PlanarSurface ;
rdfs:range :rdf:Seq ;
rdfs:label "InternalBoundaries (BH.oM.Geometry.PlanarSurface.InternalBoundaries)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/ISurface.cs#L44
:BH.oM.Physical.Elements.ISurface.Construction rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Elements.ISurface ;
rdfs:range :BH.oM.Physical.Constructions.IConstruction ;
rdfs:label "Construction (BH.oM.Physical.Elements.ISurface.Construction)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Layer.cs#L44
:BH.oM.Physical.Constructions.Layer.Material rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Layer ;
rdfs:range :BH.oM.Physical.Materials.Material ;
rdfs:label "Material (BH.oM.Physical.Constructions.Layer.Material)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Materials/Material.cs#L40
:BH.oM.Physical.Materials.Material.Properties rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Materials.Material ;
rdfs:range :rdf:Seq ;
rdfs:label "Properties (BH.oM.Physical.Materials.Material.Properties)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Materials/Material.cs#L40
:BH.oM.Physical.Materials.Material.Properties rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Materials.Material ;
rdfs:range :rdf:Seq ;
rdfs:label "Properties (BH.oM.Physical.Materials.Material.Properties)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/ISurface.cs#L45
:BH.oM.Physical.Elements.ISurface.Openings rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Elements.ISurface ;
rdfs:range :rdf:Seq ;
rdfs:label "Openings (BH.oM.Physical.Elements.ISurface.Openings)"@en .


### https://schema.org/ArchitecturalBuilding#hasFloor
:ArchitecturalBuilding.hasFloor rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasFloor"@en .


### https://schema.org/ArchitecturalBuilding#hasWall
:ArchitecturalBuilding.hasWall rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasWall"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/IOpening.cs#L41
:BH.oM.Physical.Elements.IOpening.Location rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Elements.IOpening ;
rdfs:range :BH.oM.Geometry.ISurface ;
rdfs:label "Location (BH.oM.Physical.Elements.IOpening.Location)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Curve/PolyCurve.cs#L36
:BH.oM.Geometry.PolyCurve.Curves rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Geometry.PolyCurve ;
rdfs:range :rdf:Seq ;
rdfs:label "Curves (BH.oM.Geometry.PolyCurve.Curves)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Surface/PlanarSurface.cs#L42
:BH.oM.Geometry.PlanarSurface.InternalBoundaries rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Geometry.PlanarSurface ;
rdfs:range :rdf:Seq ;
rdfs:label "InternalBoundaries (BH.oM.Geometry.PlanarSurface.InternalBoundaries)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/Window.cs#L44
:BH.oM.Physical.Elements.Window.Construction rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Elements.Window ;
rdfs:range :BH.oM.Physical.Constructions.IConstruction ;
rdfs:label "Construction (BH.oM.Physical.Elements.Window.Construction)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Construction.cs#L39
:BH.oM.Physical.Constructions.Construction.Layers rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Construction ;
rdfs:range :rdf:Seq ;
rdfs:label "Layers (BH.oM.Physical.Constructions.Construction.Layers)"@en .


### https://schema.org/ArchitecturalBuilding#hasWindow
:ArchitecturalBuilding.hasWindow rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasWindow"@en .


### https://github.com/BHoM/BHoM/blob/main/Analytical_oM/Elements/IRegion.cs#L42
:BH.oM.Analytical.Elements.IRegion.Perimeter rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Analytical.Elements.IRegion ;
rdfs:range :BH.oM.Geometry.ICurve ;
rdfs:label "Perimeter (BH.oM.Analytical.Elements.IRegion.Perimeter)"@en .


### https://github.com/BHoM/BHoM/blob/main/Architecture_oM/Elements/Room.cs#L37
:BH.oM.Architecture.Elements.Room.Location rdf:type owl:ObjectProperty ;
rdfs:domain :BH.oM.Architecture.Elements.Room ;
rdfs:range :BH.oM.Geometry.Point ;
rdfs:label "Location (BH.oM.Architecture.Elements.Room.Location)"@en .


### https://schema.org/ArchitecturalBuilding#hasRoom
:ArchitecturalBuilding.hasRoom rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :BH.oM.Architecture.Elements.Room ;
rdfs:label "hasRoom"@en .


### https://schema.org/ArchitecturalBuilding#hasLevel
:ArchitecturalBuilding.hasLevel rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasLevel"@en .


### https://schema.org/ArchitecturalBuilding#hasColumn
:ArchitecturalBuilding.hasColumn rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasColumn"@en .


### https://schema.org/ArchitecturalBuilding#hasFloor
:ArchitecturalBuilding.hasFloor rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasFloor"@en .


### https://schema.org/ArchitecturalBuilding#hasWall
:ArchitecturalBuilding.hasWall rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasWall"@en .


### https://schema.org/ArchitecturalBuilding#hasWindow
:ArchitecturalBuilding.hasWindow rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasWindow"@en .


### https://schema.org/ArchitecturalBuilding#hasLevel
:ArchitecturalBuilding.hasLevel rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasLevel"@en .


### https://schema.org/ArchitecturalBuilding#hasColumn
:ArchitecturalBuilding.hasColumn rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasColumn"@en .


### https://schema.org/ArchitecturalBuilding#hasFloor
:ArchitecturalBuilding.hasFloor rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasFloor"@en .


### https://schema.org/ArchitecturalBuilding#hasWall
:ArchitecturalBuilding.hasWall rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasWall"@en .


### https://schema.org/ArchitecturalBuilding#hasWindow
:ArchitecturalBuilding.hasWindow rdf:type owl:ObjectProperty ;
rdfs:domain :ArchitecturalBuilding ;
rdfs:range :rdf:Seq ;
rdfs:label "hasWindow"@en .


#################################################################
#    Data properties
#################################################################


### https://github.com/BHoM/BHoM/blob/main/BHoM/Interface/IBHoMObject.cs#L30
:BH.oM.Base.IBHoMObject.BHoM_Guid rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Base.IBHoMObject ;
rdfs:range xsd:string ;
rdfs:label "BHoM_Guid (BH.oM.Base.IBHoMObject.BHoM_Guid)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/Interface/IBHoMObject.cs#L32
:BH.oM.Base.IBHoMObject.Name rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Base.IBHoMObject ;
rdfs:range xsd:string ;
rdfs:label "Name (BH.oM.Base.IBHoMObject.Name)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/Interface/IBHoMObject.cs#L34
:BH.oM.Base.IBHoMObject.Fragments rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Base.IBHoMObject ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Fragments (BH.oM.Base.IBHoMObject.Fragments)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/Interface/IBHoMObject.cs#L36
:BH.oM.Base.IBHoMObject.Tags rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Base.IBHoMObject ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Tags (BH.oM.Base.IBHoMObject.Tags)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/Interface/IBHoMObject.cs#L38
:BH.oM.Base.IBHoMObject.CustomData rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Base.IBHoMObject ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "CustomData (BH.oM.Base.IBHoMObject.CustomData)"@en .


### https://github.com/BHoM/BHoM/blob/main/Spatial_oM/SettingOut/Level.cs#L41
:BH.oM.Spatial.SettingOut.Level.Elevation rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Spatial.SettingOut.Level ;
rdfs:range xsd:double ;
rdfs:label "Elevation (BH.oM.Spatial.SettingOut.Level.Elevation)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Vector/Point.cs#L37
:BH.oM.Geometry.Point.X rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Geometry.Point ;
rdfs:range xsd:double ;
rdfs:label "X (BH.oM.Geometry.Point.X)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Vector/Point.cs#L40
:BH.oM.Geometry.Point.Y rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Geometry.Point ;
rdfs:range xsd:double ;
rdfs:label "Y (BH.oM.Geometry.Point.Y)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Vector/Point.cs#L43
:BH.oM.Geometry.Point.Z rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Geometry.Point ;
rdfs:range xsd:double ;
rdfs:label "Z (BH.oM.Geometry.Point.Z)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Curve/Line.cs#L40
:BH.oM.Geometry.Line.Infinite rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Geometry.Line ;
rdfs:range xsd:boolean ;
rdfs:label "Infinite (BH.oM.Geometry.Line.Infinite)"@en .


### https://github.com/BHoM/BHoM/blob/main/Spatial_oM/ShapeProfiles/IProfile.cs#L33
:BH.oM.Spatial.ShapeProfiles.IProfile.Shape rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Spatial.ShapeProfiles.IProfile ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Shape (BH.oM.Spatial.ShapeProfiles.IProfile.Shape)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L34
:BH.oM.Base.BHoMObject.BHoM_Guid rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Spatial.ShapeProfiles.FreeFormProfile ;
rdfs:range xsd:string ;
rdfs:label "BHoM_Guid (BH.oM.Base.BHoMObject.BHoM_Guid)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L36
:BH.oM.Base.BHoMObject.Name rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Spatial.ShapeProfiles.FreeFormProfile ;
rdfs:range xsd:string ;
rdfs:label "Name (BH.oM.Base.BHoMObject.Name)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L38
:BH.oM.Base.BHoMObject.Fragments rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Spatial.ShapeProfiles.FreeFormProfile ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Fragments (BH.oM.Base.BHoMObject.Fragments)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L40
:BH.oM.Base.BHoMObject.Tags rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Spatial.ShapeProfiles.FreeFormProfile ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Tags (BH.oM.Base.BHoMObject.Tags)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L42
:BH.oM.Base.BHoMObject.CustomData rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Spatial.ShapeProfiles.FreeFormProfile ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "CustomData (BH.oM.Base.BHoMObject.CustomData)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Materials/Material.cs
:BH.oM.Physical.Materials.Material.Density rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Materials.Material ;
rdfs:range xsd:double ;
rdfs:label "Density (BH.oM.Physical.Materials.Material.Density)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Materials/IDensityProvider.cs
:BH.oM.Physical.Materials.IDensityProvider.Density rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Materials.IDensityProvider ;
rdfs:range xsd:double ;
rdfs:label "Density (BH.oM.Physical.Materials.IDensityProvider.Density)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/IEnvironmentMaterial.cs#L40
:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Conductivity rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.IEnvironmentMaterial ;
rdfs:range xsd:double ;
rdfs:label "Conductivity (BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Conductivity)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/IEnvironmentMaterial.cs#L42
:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.SpecificHeat rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.IEnvironmentMaterial ;
rdfs:range xsd:double ;
rdfs:label "SpecificHeat (BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.SpecificHeat)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/IEnvironmentMaterial.cs#L44
:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.VapourResistivity rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.IEnvironmentMaterial ;
rdfs:range xsd:double ;
rdfs:label "VapourResistivity (BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.VapourResistivity)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/IEnvironmentMaterial.cs#L46
:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Description rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.IEnvironmentMaterial ;
rdfs:range xsd:string ;
rdfs:label "Description (BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Description)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/IEnvironmentMaterial.cs#L49
:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Roughness rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.IEnvironmentMaterial ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Roughness (BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Roughness)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/IEnvironmentMaterial.cs#L51
:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Refraction rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.IEnvironmentMaterial ;
rdfs:range xsd:double ;
rdfs:label "Refraction (BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Refraction)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L52
:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceExternal rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "SolarReflectanceExternal (BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceExternal)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L54
:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceInternal rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "SolarReflectanceInternal (BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceInternal)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L56
:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarTransmittance rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "SolarTransmittance (BH.oM.Environment.MaterialFragments.SolidMaterial.SolarTransmittance)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L58
:BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceExternal rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "LightReflectanceExternal (BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceExternal)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L60
:BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceInternal rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "LightReflectanceInternal (BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceInternal)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L62
:BH.oM.Environment.MaterialFragments.SolidMaterial.LightTransmittance rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "LightTransmittance (BH.oM.Environment.MaterialFragments.SolidMaterial.LightTransmittance)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L64
:BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityExternal rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "EmissivityExternal (BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityExternal)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L66
:BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityInternal rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "EmissivityInternal (BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityInternal)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L68
:BH.oM.Environment.MaterialFragments.SolidMaterial.Specularity rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "Specularity (BH.oM.Environment.MaterialFragments.SolidMaterial.Specularity)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L70
:BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedDiffusivity rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "TransmittedDiffusivity (BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedDiffusivity)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L72
:BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedSpecularity rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:double ;
rdfs:label "TransmittedSpecularity (BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedSpecularity)"@en .


### https://github.com/BHoM/BHoM/blob/main/Environment_oM/MaterialFragments/SolidMaterial.cs#L75
:BH.oM.Environment.MaterialFragments.SolidMaterial.IgnoreInUValueCalculation rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Environment.MaterialFragments.SolidMaterial ;
rdfs:range xsd:boolean ;
rdfs:label "IgnoreInUValueCalculation (BH.oM.Environment.MaterialFragments.SolidMaterial.IgnoreInUValueCalculation)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/IMaterialFragment.cs#L42
:BH.oM.Structure.MaterialFragments.IMaterialFragment.DampingRatio rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.IMaterialFragment ;
rdfs:range xsd:double ;
rdfs:label "DampingRatio (BH.oM.Structure.MaterialFragments.IMaterialFragment.DampingRatio)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Vector/Vector.cs#L38
:BH.oM.Geometry.Vector.X rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Geometry.Vector ;
rdfs:range xsd:double ;
rdfs:label "X (BH.oM.Geometry.Vector.X)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Vector/Vector.cs#L42
:BH.oM.Geometry.Vector.Y rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Geometry.Vector ;
rdfs:range xsd:double ;
rdfs:label "Y (BH.oM.Geometry.Vector.Y)"@en .


### https://github.com/BHoM/BHoM/blob/main/Geometry_oM/Vector/Vector.cs#L46
:BH.oM.Geometry.Vector.Z rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Geometry.Vector ;
rdfs:range xsd:double ;
rdfs:label "Z (BH.oM.Geometry.Vector.Z)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs
:BH.oM.Structure.MaterialFragments.Timber.DensityCharacteristic rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range xsd:double ;
rdfs:label "DensityCharacteristic (BH.oM.Structure.MaterialFragments.Timber.DensityCharacteristic)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs#L70
:BH.oM.Structure.MaterialFragments.Timber.BendingStrength rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range xsd:double ;
rdfs:label "BendingStrength (BH.oM.Structure.MaterialFragments.Timber.BendingStrength)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs#L74
:BH.oM.Structure.MaterialFragments.Timber.TensionParallelStrength rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range xsd:double ;
rdfs:label "TensionParallelStrength (BH.oM.Structure.MaterialFragments.Timber.TensionParallelStrength)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs#L78
:BH.oM.Structure.MaterialFragments.Timber.TensionPerpendicularStrength rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range xsd:double ;
rdfs:label "TensionPerpendicularStrength (BH.oM.Structure.MaterialFragments.Timber.TensionPerpendicularStrength)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs#L82
:BH.oM.Structure.MaterialFragments.Timber.CompressionParallelStrength rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range xsd:double ;
rdfs:label "CompressionParallelStrength (BH.oM.Structure.MaterialFragments.Timber.CompressionParallelStrength)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs#L86
:BH.oM.Structure.MaterialFragments.Timber.CompressionPerpendicularStrength rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range xsd:double ;
rdfs:label "CompressionPerpendicularStrength (BH.oM.Structure.MaterialFragments.Timber.CompressionPerpendicularStrength)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs#L90
:BH.oM.Structure.MaterialFragments.Timber.ShearStrength rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range xsd:double ;
rdfs:label "ShearStrength (BH.oM.Structure.MaterialFragments.Timber.ShearStrength)"@en .


### https://github.com/BHoM/BHoM/blob/main/Structure_oM/MaterialFragments/Timber.cs
:BH.oM.Structure.MaterialFragments.Timber.RollingShearStrength rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Structure.MaterialFragments.Timber ;
rdfs:range xsd:double ;
rdfs:label "RollingShearStrength (BH.oM.Structure.MaterialFragments.Timber.RollingShearStrength)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/FramingProperties/ConstantFramingProperty.cs#L45
:BH.oM.Physical.FramingProperties.ConstantFramingProperty.OrientationAngle rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.FramingProperties.ConstantFramingProperty ;
rdfs:range xsd:double ;
rdfs:label "OrientationAngle (BH.oM.Physical.FramingProperties.ConstantFramingProperty.OrientationAngle)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L34
:BH.oM.Base.BHoMObject.BHoM_Guid rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Column ;
rdfs:range xsd:string ;
rdfs:label "BHoM_Guid (BH.oM.Base.BHoMObject.BHoM_Guid)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L36
:BH.oM.Base.BHoMObject.Name rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Column ;
rdfs:range xsd:string ;
rdfs:label "Name (BH.oM.Base.BHoMObject.Name)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L38
:BH.oM.Base.BHoMObject.Fragments rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Column ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Fragments (BH.oM.Base.BHoMObject.Fragments)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L40
:BH.oM.Base.BHoMObject.Tags rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Column ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Tags (BH.oM.Base.BHoMObject.Tags)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L42
:BH.oM.Base.BHoMObject.CustomData rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Column ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "CustomData (BH.oM.Base.BHoMObject.CustomData)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Constructions/Layer.cs#L47
:BH.oM.Physical.Constructions.Layer.Thickness rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Constructions.Layer ;
rdfs:range xsd:double ;
rdfs:label "Thickness (BH.oM.Physical.Constructions.Layer.Thickness)"@en .


### https://github.com/BHoM/BHoM/blob/main/Physical_oM/Elements/ISurface.cs#L46
:BH.oM.Physical.Elements.ISurface.Offset rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.ISurface ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Offset (BH.oM.Physical.Elements.ISurface.Offset)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L34
:BH.oM.Base.BHoMObject.BHoM_Guid rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Floor ;
rdfs:range xsd:string ;
rdfs:label "BHoM_Guid (BH.oM.Base.BHoMObject.BHoM_Guid)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L36
:BH.oM.Base.BHoMObject.Name rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Floor ;
rdfs:range xsd:string ;
rdfs:label "Name (BH.oM.Base.BHoMObject.Name)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L38
:BH.oM.Base.BHoMObject.Fragments rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Floor ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Fragments (BH.oM.Base.BHoMObject.Fragments)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L40
:BH.oM.Base.BHoMObject.Tags rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Floor ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "Tags (BH.oM.Base.BHoMObject.Tags)"@en .


### https://github.com/BHoM/BHoM/blob/main/BHoM/BHoMObject.cs#L42
:BH.oM.Base.BHoMObject.CustomData rdf:type owl:DatatypeProperty ;
rdfs:domain :BH.oM.Physical.Elements.Floor ;
rdfs:range :BH.oM.Adapters.RDF.Base64JsonSerialized ;
rdfs:label "CustomData (BH.oM.Base.BHoMObject.CustomData)"@en .


#################################################################
#    Individuals
#################################################################

# ABoxSettings:
# IndividualsBaseAddress: https://uni-stuttgart.de





### https://uni-stuttgart.de/9b3a1483-3733-4978-9edd-f10e54aa5ba8
<https://uni-stuttgart.de/9b3a1483-3733-4978-9edd-f10e54aa5ba8> rdf:type owl:NamedIndividual ,
		:BH.oM.Spatial.SettingOut.Level ;
		:BH.oM.Spatial.SettingOut.Level.Elevation "0"^^xsd:double;
		:BH.oM.Base.BHoMObject.BHoM_Guid "9b3a1483-3733-4978-9edd-f10e54aa5ba8"^^xsd:string .


### https://uni-stuttgart.de/68dfa492-0096-482f-8eb8-dc7dd250616d
<https://uni-stuttgart.de/68dfa492-0096-482f-8eb8-dc7dd250616d> rdf:type owl:NamedIndividual ,
		:BH.oM.Spatial.SettingOut.Level ;
		:BH.oM.Spatial.SettingOut.Level.Elevation "4"^^xsd:double;
		:BH.oM.Base.BHoMObject.BHoM_Guid "68dfa492-0096-482f-8eb8-dc7dd250616d"^^xsd:string .


### https://uni-stuttgart.de/bbd1b921-bd24-f71e-80bd-4ffdb9cac014
<https://uni-stuttgart.de/bbd1b921-bd24-f71e-80bd-4ffdb9cac014> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-0.79414756602581"^^xsd:double;
		:BH.oM.Geometry.Point.Y "-1.97854863106662"^^xsd:double;
		:BH.oM.Geometry.Point.Z "0"^^xsd:double .


### https://uni-stuttgart.de/1e39143f-d25e-a3f4-9443-b6f5df319967
<https://uni-stuttgart.de/1e39143f-d25e-a3f4-9443-b6f5df319967> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-0.79414756602581"^^xsd:double;
		:BH.oM.Geometry.Point.Y "-1.97854863106662"^^xsd:double;
		:BH.oM.Geometry.Point.Z "4"^^xsd:double .


### https://uni-stuttgart.de/2b097a20-154e-59cf-d635-60f27fd885bf
<https://uni-stuttgart.de/2b097a20-154e-59cf-d635-60f27fd885bf> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Line ;
		:BH.oM.Geometry.Line.Start <https://uni-stuttgart.de/bbd1b921-bd24-f71e-80bd-4ffdb9cac014> ;
		:BH.oM.Geometry.Line.End <https://uni-stuttgart.de/1e39143f-d25e-a3f4-9443-b6f5df319967> ;
		:BH.oM.Geometry.Line.Infinite "False"^^xsd:boolean .


### https://uni-stuttgart.de/acf84a7a-088a-4947-8717-6dc2fc45de9f
<https://uni-stuttgart.de/acf84a7a-088a-4947-8717-6dc2fc45de9f> rdf:type owl:NamedIndividual ,
		:BH.oM.Spatial.ShapeProfiles.FreeFormProfile ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "acf84a7a-088a-4947-8717-6dc2fc45de9f"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/f389a4f8-a062-4407-9b27-303b9af0cf73
<https://uni-stuttgart.de/f389a4f8-a062-4407-9b27-303b9af0cf73> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Materials.Material ;
		:BH.oM.Physical.Materials.Material.Density "NaN"^^xsd:double;
		:BH.oM.Physical.Materials.Material.Properties rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/cd48c888-b7b8-4389-b29b-b7cc3799ad93> ;
		rdf:_1 <https://uni-stuttgart.de/9a6ac4be-d79c-4d0f-a615-795f18ef7af4> ;

		:BH.oM.Base.BHoMObject.BHoM_Guid "f389a4f8-a062-4407-9b27-303b9af0cf73"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "Wood - Dimensional Lumber"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/cd48c888-b7b8-4389-b29b-b7cc3799ad93
<https://uni-stuttgart.de/cd48c888-b7b8-4389-b29b-b7cc3799ad93> rdf:type owl:NamedIndividual ,
		:BH.oM.Environment.MaterialFragments.SolidMaterial ;
		:BH.oM.Physical.Materials.IDensityProvider.Density "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Conductivity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.SpecificHeat "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.VapourResistivity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Roughness "ew0KICAiJHR5cGUiOiAiQkguRW5naW5lLkFkYXB0ZXJzLlJERi5Db252ZXJ0K1R5cGVXcmFwcGVyYDFbW0JILm9NLkVudmlyb25tZW50Lk1hdGVyaWFsRnJhZ21lbnRzLlJvdWdobmVzcywgRW52aXJvbm1lbnRfb01dXSwgUkRGX0VuZ2luZSIsDQogICJWYWx1ZSI6IDANCn0="^^:BH.oM.Adapters.RDF.Base64JsonSerialized;
		:BH.oM.Environment.MaterialFragments.IEnvironmentMaterial.Refraction "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceExternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceInternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarTransmittance "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceExternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceInternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.LightTransmittance "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityExternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityInternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.Specularity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedDiffusivity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedSpecularity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.IgnoreInUValueCalculation "False"^^xsd:boolean;
		:BH.oM.Base.BHoMObject.BHoM_Guid "cd48c888-b7b8-4389-b29b-b7cc3799ad93"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "Wood - Dimensional Lumber"^^xsd:string .


### https://uni-stuttgart.de/c316b248-f913-f27c-6f13-3d76cc84e3bc
<https://uni-stuttgart.de/c316b248-f913-f27c-6f13-3d76cc84e3bc> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Vector ;
		:BH.oM.Geometry.Vector.X "199947.961501882"^^xsd:double;
		:BH.oM.Geometry.Vector.Y "199947.961501882"^^xsd:double;
		:BH.oM.Geometry.Vector.Z "199947.961501882"^^xsd:double .


### https://uni-stuttgart.de/57b729dd-2029-758b-155d-b0010c748a14
<https://uni-stuttgart.de/57b729dd-2029-758b-155d-b0010c748a14> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Vector ;
		:BH.oM.Geometry.Vector.X "0.3"^^xsd:double;
		:BH.oM.Geometry.Vector.Y "0.3"^^xsd:double;
		:BH.oM.Geometry.Vector.Z "0.3"^^xsd:double .


### https://uni-stuttgart.de/283048b2-e05a-ab8a-9f24-b78dc0abb911
<https://uni-stuttgart.de/283048b2-e05a-ab8a-9f24-b78dc0abb911> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Vector ;
		:BH.oM.Geometry.Vector.X "1.08E-05"^^xsd:double;
		:BH.oM.Geometry.Vector.Y "1.08E-05"^^xsd:double;
		:BH.oM.Geometry.Vector.Z "1.08E-05"^^xsd:double .


### https://uni-stuttgart.de/9a6ac4be-d79c-4d0f-a615-795f18ef7af4
<https://uni-stuttgart.de/9a6ac4be-d79c-4d0f-a615-795f18ef7af4> rdf:type owl:NamedIndividual ,
		:BH.oM.Structure.MaterialFragments.Timber ;
		:BH.oM.Structure.MaterialFragments.IMaterialFragment.DampingRatio "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.IOrthotropic.YoungsModulus <https://uni-stuttgart.de/c316b248-f913-f27c-6f13-3d76cc84e3bc> ;
		:BH.oM.Structure.MaterialFragments.IOrthotropic.PoissonsRatio <https://uni-stuttgart.de/57b729dd-2029-758b-155d-b0010c748a14> ;
		:BH.oM.Structure.MaterialFragments.IOrthotropic.ThermalExpansionCoeff <https://uni-stuttgart.de/283048b2-e05a-ab8a-9f24-b78dc0abb911> ;
		:BH.oM.Structure.MaterialFragments.Timber.DensityCharacteristic "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.BendingStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.TensionParallelStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.TensionPerpendicularStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.CompressionParallelStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.CompressionPerpendicularStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.ShearStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.RollingShearStrength "0"^^xsd:double;
		:BH.oM.Base.BHoMObject.BHoM_Guid "9a6ac4be-d79c-4d0f-a615-795f18ef7af4"^^xsd:string .


### https://uni-stuttgart.de/fd15c68d-502f-4982-80b6-ad85408723d5
<https://uni-stuttgart.de/fd15c68d-502f-4982-80b6-ad85408723d5> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.FramingProperties.ConstantFramingProperty ;
		:BH.oM.Physical.FramingProperties.ConstantFramingProperty.Profile <https://uni-stuttgart.de/acf84a7a-088a-4947-8717-6dc2fc45de9f> ;
		:BH.oM.Physical.FramingProperties.ConstantFramingProperty.Material <https://uni-stuttgart.de/f389a4f8-a062-4407-9b27-303b9af0cf73> ;
		:BH.oM.Physical.FramingProperties.ConstantFramingProperty.OrientationAngle "1.5707963267949"^^xsd:double;
		:BH.oM.Base.BHoMObject.BHoM_Guid "fd15c68d-502f-4982-80b6-ad85408723d5"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/55f65444-4e36-464a-aa3f-f8fbdf463e3e
<https://uni-stuttgart.de/55f65444-4e36-464a-aa3f-f8fbdf463e3e> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Physical.Elements.IFramingElement.Location <https://uni-stuttgart.de/2b097a20-154e-59cf-d635-60f27fd885bf> ;
		:BH.oM.Physical.Elements.IFramingElement.Property <https://uni-stuttgart.de/fd15c68d-502f-4982-80b6-ad85408723d5> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "55f65444-4e36-464a-aa3f-f8fbdf463e3e"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/9bfc8f09-17d6-4bbe-aa47-02bc1bc7db80
<https://uni-stuttgart.de/9bfc8f09-17d6-4bbe-aa47-02bc1bc7db80> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "9bfc8f09-17d6-4bbe-aa47-02bc1bc7db80"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/6673ba52-5544-4380-acbd-340ab27eaf8c
<https://uni-stuttgart.de/6673ba52-5544-4380-acbd-340ab27eaf8c> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "6673ba52-5544-4380-acbd-340ab27eaf8c"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/8b8995a9-7f85-4648-bdcb-67e2827dbf01
<https://uni-stuttgart.de/8b8995a9-7f85-4648-bdcb-67e2827dbf01> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "8b8995a9-7f85-4648-bdcb-67e2827dbf01"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/a63baa61-174b-4682-b703-2016d42136cf
<https://uni-stuttgart.de/a63baa61-174b-4682-b703-2016d42136cf> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "a63baa61-174b-4682-b703-2016d42136cf"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/4a0744e2-e8d2-414c-a4c9-7cc90c5dadff
<https://uni-stuttgart.de/4a0744e2-e8d2-414c-a4c9-7cc90c5dadff> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "4a0744e2-e8d2-414c-a4c9-7cc90c5dadff"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/d047ecb3-b779-4949-93d3-6e5a0697a2f2
<https://uni-stuttgart.de/d047ecb3-b779-4949-93d3-6e5a0697a2f2> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "d047ecb3-b779-4949-93d3-6e5a0697a2f2"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/b7124ee7-9968-4f26-9929-3039c57bf052
<https://uni-stuttgart.de/b7124ee7-9968-4f26-9929-3039c57bf052> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "b7124ee7-9968-4f26-9929-3039c57bf052"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/1e801823-716c-48c0-8124-e07671876aa1
<https://uni-stuttgart.de/1e801823-716c-48c0-8124-e07671876aa1> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "1e801823-716c-48c0-8124-e07671876aa1"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/b6a6b231-ca5c-4a4f-b01e-9908182a940d
<https://uni-stuttgart.de/b6a6b231-ca5c-4a4f-b01e-9908182a940d> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "b6a6b231-ca5c-4a4f-b01e-9908182a940d"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/598450b1-4abb-405c-9f9c-4f17ce2559df
<https://uni-stuttgart.de/598450b1-4abb-405c-9f9c-4f17ce2559df> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "598450b1-4abb-405c-9f9c-4f17ce2559df"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/6936a2ec-37f7-4cb9-b955-c88e858a218b
<https://uni-stuttgart.de/6936a2ec-37f7-4cb9-b955-c88e858a218b> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Column ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "6936a2ec-37f7-4cb9-b955-c88e858a218b"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "140 x 140"^^xsd:string .


### https://uni-stuttgart.de/861aa2bb-ba47-4e2d-3152-fa17e7fefc23
<https://uni-stuttgart.de/861aa2bb-ba47-4e2d-3152-fa17e7fefc23> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Line ;
		:BH.oM.Geometry.Line.Start <https://uni-stuttgart.de/c70a8b67-7afb-a9a7-3a0a-818dc62c65d0> ;
		:BH.oM.Geometry.Line.End <https://uni-stuttgart.de/fe526b64-4ce0-ab53-c838-c04d68dc63bd> ;
		:BH.oM.Geometry.Line.Infinite "False"^^xsd:boolean .


### https://uni-stuttgart.de/c70a8b67-7afb-a9a7-3a0a-818dc62c65d0
<https://uni-stuttgart.de/c70a8b67-7afb-a9a7-3a0a-818dc62c65d0> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "8.72937661147752"^^xsd:double;
		:BH.oM.Geometry.Point.Y "4.59145136893338"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/fe526b64-4ce0-ab53-c838-c04d68dc63bd
<https://uni-stuttgart.de/fe526b64-4ce0-ab53-c838-c04d68dc63bd> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-1.41062338852248"^^xsd:double;
		:BH.oM.Geometry.Point.Y "4.59145136893338"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/2e16b4e0-caf8-4dce-f62c-8c07a9c5fd48
<https://uni-stuttgart.de/2e16b4e0-caf8-4dce-f62c-8c07a9c5fd48> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Line ;
		:BH.oM.Geometry.Line.Start <https://uni-stuttgart.de/fe526b64-4ce0-ab53-c838-c04d68dc63bd> ;
		:BH.oM.Geometry.Line.End <https://uni-stuttgart.de/87c90665-3085-0011-d821-f0a3c9d8dfb3> ;
		:BH.oM.Geometry.Line.Infinite "False"^^xsd:boolean .


### https://uni-stuttgart.de/fe526b64-4ce0-ab53-c838-c04d68dc63bd
<https://uni-stuttgart.de/fe526b64-4ce0-ab53-c838-c04d68dc63bd> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-1.41062338852248"^^xsd:double;
		:BH.oM.Geometry.Point.Y "4.59145136893338"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/87c90665-3085-0011-d821-f0a3c9d8dfb3
<https://uni-stuttgart.de/87c90665-3085-0011-d821-f0a3c9d8dfb3> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-1.41062338852248"^^xsd:double;
		:BH.oM.Geometry.Point.Y "-2.54854863106662"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/0849feb7-9feb-2064-923f-dfd378296f68
<https://uni-stuttgart.de/0849feb7-9feb-2064-923f-dfd378296f68> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Line ;
		:BH.oM.Geometry.Line.Start <https://uni-stuttgart.de/87c90665-3085-0011-d821-f0a3c9d8dfb3> ;
		:BH.oM.Geometry.Line.End <https://uni-stuttgart.de/0afd4827-d09d-e17b-4425-c54ba326424e> ;
		:BH.oM.Geometry.Line.Infinite "False"^^xsd:boolean .


### https://uni-stuttgart.de/87c90665-3085-0011-d821-f0a3c9d8dfb3
<https://uni-stuttgart.de/87c90665-3085-0011-d821-f0a3c9d8dfb3> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-1.41062338852248"^^xsd:double;
		:BH.oM.Geometry.Point.Y "-2.54854863106662"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/0afd4827-d09d-e17b-4425-c54ba326424e
<https://uni-stuttgart.de/0afd4827-d09d-e17b-4425-c54ba326424e> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "8.72937661147752"^^xsd:double;
		:BH.oM.Geometry.Point.Y "-2.54854863106662"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/168045f6-6fae-88c7-110f-42e25bf8b27c
<https://uni-stuttgart.de/168045f6-6fae-88c7-110f-42e25bf8b27c> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Line ;
		:BH.oM.Geometry.Line.Start <https://uni-stuttgart.de/0afd4827-d09d-e17b-4425-c54ba326424e> ;
		:BH.oM.Geometry.Line.End <https://uni-stuttgart.de/c70a8b67-7afb-a9a7-3a0a-818dc62c65d0> ;
		:BH.oM.Geometry.Line.Infinite "False"^^xsd:boolean .


### https://uni-stuttgart.de/0afd4827-d09d-e17b-4425-c54ba326424e
<https://uni-stuttgart.de/0afd4827-d09d-e17b-4425-c54ba326424e> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "8.72937661147752"^^xsd:double;
		:BH.oM.Geometry.Point.Y "-2.54854863106662"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/c70a8b67-7afb-a9a7-3a0a-818dc62c65d0
<https://uni-stuttgart.de/c70a8b67-7afb-a9a7-3a0a-818dc62c65d0> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "8.72937661147752"^^xsd:double;
		:BH.oM.Geometry.Point.Y "4.59145136893338"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/730af990-ee9a-0cfe-da6c-d2cd814b8be9
<https://uni-stuttgart.de/730af990-ee9a-0cfe-da6c-d2cd814b8be9> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.PolyCurve ;
		:BH.oM.Geometry.PolyCurve.Curves rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/861aa2bb-ba47-4e2d-3152-fa17e7fefc23> ;
		rdf:_1 <https://uni-stuttgart.de/2e16b4e0-caf8-4dce-f62c-8c07a9c5fd48> ;
		rdf:_2 <https://uni-stuttgart.de/0849feb7-9feb-2064-923f-dfd378296f68> ;
		rdf:_3 <https://uni-stuttgart.de/168045f6-6fae-88c7-110f-42e25bf8b27c>  .


### https://uni-stuttgart.de/32925eb1-3617-f2d8-ec20-d557923bbf86
<https://uni-stuttgart.de/32925eb1-3617-f2d8-ec20-d557923bbf86> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.PlanarSurface ;
		:BH.oM.Geometry.PlanarSurface.ExternalBoundary <https://uni-stuttgart.de/730af990-ee9a-0cfe-da6c-d2cd814b8be9>  .


### https://uni-stuttgart.de/5a00189d-de89-4996-9074-9f1b62160c86
<https://uni-stuttgart.de/5a00189d-de89-4996-9074-9f1b62160c86> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Materials.Material ;
		:BH.oM.Physical.Materials.Material.Density "NaN"^^xsd:double;
		:BH.oM.Physical.Materials.Material.Properties rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/98ecb98b-be88-4cb0-b1f4-2f3e0cabceb3> ;
		rdf:_1 <https://uni-stuttgart.de/258bba26-c48d-4a6f-b239-3dcaa4ef83a2> ;

		:BH.oM.Base.BHoMObject.BHoM_Guid "5a00189d-de89-4996-9074-9f1b62160c86"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "Wood Sheathing, Chipboard"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/98ecb98b-be88-4cb0-b1f4-2f3e0cabceb3
<https://uni-stuttgart.de/98ecb98b-be88-4cb0-b1f4-2f3e0cabceb3> rdf:type owl:NamedIndividual ,
		:BH.oM.Environment.MaterialFragments.SolidMaterial ;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceExternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceInternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarTransmittance "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceExternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceInternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.LightTransmittance "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityExternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityInternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.Specularity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedDiffusivity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedSpecularity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.IgnoreInUValueCalculation "False"^^xsd:boolean;
		:BH.oM.Base.BHoMObject.BHoM_Guid "98ecb98b-be88-4cb0-b1f4-2f3e0cabceb3"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "Wood Sheathing, Chipboard"^^xsd:string .


### https://uni-stuttgart.de/258bba26-c48d-4a6f-b239-3dcaa4ef83a2
<https://uni-stuttgart.de/258bba26-c48d-4a6f-b239-3dcaa4ef83a2> rdf:type owl:NamedIndividual ,
		:BH.oM.Structure.MaterialFragments.Timber ;
		:BH.oM.Structure.MaterialFragments.Timber.DensityCharacteristic "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.BendingStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.TensionParallelStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.TensionPerpendicularStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.CompressionParallelStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.CompressionPerpendicularStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.ShearStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.RollingShearStrength "0"^^xsd:double;
		:BH.oM.Base.BHoMObject.BHoM_Guid "258bba26-c48d-4a6f-b239-3dcaa4ef83a2"^^xsd:string .


### https://uni-stuttgart.de/4e76c0c5-953c-4f9e-868e-da24f02928ca
<https://uni-stuttgart.de/4e76c0c5-953c-4f9e-868e-da24f02928ca> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Layer ;
		:BH.oM.Physical.Constructions.Layer.Material <https://uni-stuttgart.de/5a00189d-de89-4996-9074-9f1b62160c86> ;
		:BH.oM.Physical.Constructions.Layer.Thickness "0.022"^^xsd:double;
		:BH.oM.Base.BHoMObject.BHoM_Guid "4e76c0c5-953c-4f9e-868e-da24f02928ca"^^xsd:string .


### https://uni-stuttgart.de/e2dbe228-80e4-430c-b15c-8b8001e7fd3c
<https://uni-stuttgart.de/e2dbe228-80e4-430c-b15c-8b8001e7fd3c> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Layer ;
		:BH.oM.Physical.Constructions.Layer.Material <https://uni-stuttgart.de/7c693836-ad8e-465d-a01d-34107bdc1579> ;
		:BH.oM.Physical.Constructions.Layer.Thickness "0.225"^^xsd:double;
		:BH.oM.Base.BHoMObject.BHoM_Guid "e2dbe228-80e4-430c-b15c-8b8001e7fd3c"^^xsd:string .


### https://uni-stuttgart.de/7c693836-ad8e-465d-a01d-34107bdc1579
<https://uni-stuttgart.de/7c693836-ad8e-465d-a01d-34107bdc1579> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Materials.Material ;
		:BH.oM.Physical.Materials.Material.Density "NaN"^^xsd:double;
		:BH.oM.Physical.Materials.Material.Properties rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/bfae9f0e-f700-4b23-a703-91a1f4843b0e> ;
		rdf:_1 <https://uni-stuttgart.de/421c9f26-511b-4d83-b9b7-f5cf468368e1> ;

		:BH.oM.Base.BHoMObject.BHoM_Guid "7c693836-ad8e-465d-a01d-34107bdc1579"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "Structure, Timber Joist/Rafter Layer"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments "ew0KICAiJHR5cGUiOiAiQkguRW5naW5lLkFkYXB0ZXJzLlJERi5Db252ZXJ0K1R5cGVXcmFwcGVyYDFbW0JILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb01dXSwgUkRGX0VuZ2luZSIsDQogICJWYWx1ZSI6IHsNCiAgICAiJHR5cGUiOiAiQkgub00uQmFzZS5GcmFnbWVudFNldCwgQkhvTSIsDQogICAgIiR2YWx1ZXMiOiBbDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0SWRlbnRpZmllcnMsIFJldml0X29NIiwNCiAgICAgICAgIlBlcnNpc3RlbnRJZCI6ICI0NThjMGYyMS0wMWJiLTExZDUtOTMwMi0wMDAwODYzZjI3YWQtMDAwMDAzMTQiLA0KICAgICAgICAiRWxlbWVudElkIjogNzg4LA0KICAgICAgICAiQ2F0ZWdvcnlOYW1lIjogIk1hdGVyaWFscyIsDQogICAgICAgICJGYW1pbHlOYW1lIjogIiIsDQogICAgICAgICJGYW1pbHlUeXBlTmFtZSI6ICIiLA0KICAgICAgICAiRmFtaWx5VHlwZUlkIjogLTEsDQogICAgICAgICJXb3Jrc2V0IjogIiIsDQogICAgICAgICJPd25lclZpZXdJZCI6IC0xLA0KICAgICAgICAiUGFyZW50RWxlbWVudElkIjogLTEsDQogICAgICAgICJMaW5rRG9jdW1lbnQiOiAiIg0KICAgICAgfSwNCiAgICAgIHsNCiAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQdWxsZWRQYXJhbWV0ZXJzLCBSZXZpdF9vTSIsDQogICAgICAgICJQYXJhbWV0ZXJzIjogew0KICAgICAgICAgICIkdHlwZSI6ICJTeXN0ZW0uQ29sbGVjdGlvbnMuT2JqZWN0TW9kZWwuUmVhZE9ubHlDb2xsZWN0aW9uYDFbW0JILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NXV0sIG1zY29ybGliIiwNCiAgICAgICAgICAiJHZhbHVlcyI6IFsNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiTmFtZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJTdHJ1Y3R1cmUsIFRpbWJlciBKb2lzdC9SYWZ0ZXIgTGF5ZXIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJNYXJrIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlRyYW5zcGFyZW5jeSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkNvbG9yIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVVJMIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkNvc3QiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAwLjAsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1hbnVmYWN0dXJlciIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJLZXlub3RlIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlNtb290aG5lc3MiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiA1MCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiU2hpbmluZXNzIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogNjQsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkdsb3ciLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBmYWxzZSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVzY3JpcHRpb24iLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAiVGltYmVyIGZyYW1pbmcsIHRoZXJtYWwgYWlyc3BhY2UiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJJbWFnZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IC0xLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJNb2RlbCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJDb21tZW50cyIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiQkhvTV9HdWlkIjogIjJhZjFmZTg5LTQ5NGEtNDRkYi05NjMxLTYwNWVhZDIzOTBkYiIsDQogICAgICAgICJOYW1lIjogIiIsDQogICAgICAgICJGcmFnbWVudHMiOiB7DQogICAgICAgICAgIiR0eXBlIjogIkJILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb00iLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIlRhZ3MiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkhhc2hTZXRgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdXSwgU3lzdGVtLkNvcmUiLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIkN1c3RvbURhdGEiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlgMltbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdLFtTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYl1dLCBtc2NvcmxpYiINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIF0NCiAgfQ0KfQ=="^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/bfae9f0e-f700-4b23-a703-91a1f4843b0e
<https://uni-stuttgart.de/bfae9f0e-f700-4b23-a703-91a1f4843b0e> rdf:type owl:NamedIndividual ,
		:BH.oM.Environment.MaterialFragments.SolidMaterial ;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceExternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarReflectanceInternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.SolarTransmittance "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceExternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.LightReflectanceInternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.LightTransmittance "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityExternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.EmissivityInternal "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.Specularity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedDiffusivity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.TransmittedSpecularity "0"^^xsd:double;
		:BH.oM.Environment.MaterialFragments.SolidMaterial.IgnoreInUValueCalculation "False"^^xsd:boolean;
		:BH.oM.Base.BHoMObject.BHoM_Guid "bfae9f0e-f700-4b23-a703-91a1f4843b0e"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "Structure, Timber Joist/Rafter Layer"^^xsd:string .


### https://uni-stuttgart.de/421c9f26-511b-4d83-b9b7-f5cf468368e1
<https://uni-stuttgart.de/421c9f26-511b-4d83-b9b7-f5cf468368e1> rdf:type owl:NamedIndividual ,
		:BH.oM.Structure.MaterialFragments.Timber ;
		:BH.oM.Structure.MaterialFragments.Timber.DensityCharacteristic "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.BendingStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.TensionParallelStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.TensionPerpendicularStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.CompressionParallelStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.CompressionPerpendicularStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.ShearStrength "0"^^xsd:double;
		:BH.oM.Structure.MaterialFragments.Timber.RollingShearStrength "0"^^xsd:double;
		:BH.oM.Base.BHoMObject.BHoM_Guid "421c9f26-511b-4d83-b9b7-f5cf468368e1"^^xsd:string .


### https://uni-stuttgart.de/ad7d93a3-5de8-47d5-8023-56c85479f8bd
<https://uni-stuttgart.de/ad7d93a3-5de8-47d5-8023-56c85479f8bd> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Physical.Constructions.Construction.Layers rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/4e76c0c5-953c-4f9e-868e-da24f02928ca> ;
		rdf:_1 <https://uni-stuttgart.de/e2dbe228-80e4-430c-b15c-8b8001e7fd3c> ;

		:BH.oM.Base.BHoMObject.BHoM_Guid "ad7d93a3-5de8-47d5-8023-56c85479f8bd"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "Floor: Floor_Timber_22Cbd-225Joist"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/648e53ef-f1f8-407f-b77b-03c3d8ab2c28
<https://uni-stuttgart.de/648e53ef-f1f8-407f-b77b-03c3d8ab2c28> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Floor ;
		:BH.oM.Physical.Elements.ISurface.Location <https://uni-stuttgart.de/32925eb1-3617-f2d8-ec20-d557923bbf86> ;
		:BH.oM.Physical.Elements.ISurface.Construction <https://uni-stuttgart.de/ad7d93a3-5de8-47d5-8023-56c85479f8bd> ;
		:BH.oM.Physical.Elements.ISurface.Offset "ew0KICAiJHR5cGUiOiAiQkguRW5naW5lLkFkYXB0ZXJzLlJERi5Db252ZXJ0K1R5cGVXcmFwcGVyYDFbW0JILm9NLlBoeXNpY2FsLkVsZW1lbnRzLk9mZnNldCwgUGh5c2ljYWxfb01dXSwgUkRGX0VuZ2luZSIsDQogICJWYWx1ZSI6IDENCn0="^^:BH.oM.Adapters.RDF.Base64JsonSerialized;
		:BH.oM.Base.BHoMObject.BHoM_Guid "648e53ef-f1f8-407f-b77b-03c3d8ab2c28"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "Floor: Floor_Timber_22Cbd-225Joist"^^xsd:string .


### https://uni-stuttgart.de/c4ea6bbd-afde-45c2-be37-9b79a2414b95
<https://uni-stuttgart.de/c4ea6bbd-afde-45c2-be37-9b79a2414b95> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Floor ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "c4ea6bbd-afde-45c2-be37-9b79a2414b95"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "Floor: Floor_Timber_22Cbd-225Joist"^^xsd:string .


### https://uni-stuttgart.de/a8923450-ea55-49fe-8731-9bacea9e8cbc
<https://uni-stuttgart.de/a8923450-ea55-49fe-8731-9bacea9e8cbc> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Wall ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "a8923450-ea55-49fe-8731-9bacea9e8cbc"^^xsd:string .


### https://uni-stuttgart.de/77e58f0f-c0e8-40f8-9165-74769e42487f
<https://uni-stuttgart.de/77e58f0f-c0e8-40f8-9165-74769e42487f> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Wall ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "77e58f0f-c0e8-40f8-9165-74769e42487f"^^xsd:string .


### https://uni-stuttgart.de/1f2fc931-e30c-4229-97f7-e92d51fac069
<https://uni-stuttgart.de/1f2fc931-e30c-4229-97f7-e92d51fac069> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Wall ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "1f2fc931-e30c-4229-97f7-e92d51fac069"^^xsd:string .


### https://uni-stuttgart.de/9494970d-fa4c-448f-a78a-f35c964fb4f3
<https://uni-stuttgart.de/9494970d-fa4c-448f-a78a-f35c964fb4f3> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Wall ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "9494970d-fa4c-448f-a78a-f35c964fb4f3"^^xsd:string .


### https://uni-stuttgart.de/3a94cc6c-dbd6-3df0-1c22-5eeae79a1d6b
<https://uni-stuttgart.de/3a94cc6c-dbd6-3df0-1c22-5eeae79a1d6b> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.PlanarSurface ;
		:BH.oM.Geometry.PlanarSurface.ExternalBoundary <https://uni-stuttgart.de/c96b157f-e8a7-26fc-af6a-d8409a8cf95b>  .


### https://uni-stuttgart.de/c96b157f-e8a7-26fc-af6a-d8409a8cf95b
<https://uni-stuttgart.de/c96b157f-e8a7-26fc-af6a-d8409a8cf95b> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.PolyCurve ;
		:BH.oM.Geometry.PolyCurve.Curves rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/09e133ce-2e99-ae92-45fb-1d0477f80508> ;
		rdf:_1 <https://uni-stuttgart.de/e0bb1765-74da-6acc-1f59-452e29f5a7ff> ;
		rdf:_2 <https://uni-stuttgart.de/68205cc2-5517-4ecb-21a0-40849eef35c2> ;
		rdf:_3 <https://uni-stuttgart.de/61819389-fb27-ffc5-4f31-966d86cf53f7>  .


### https://uni-stuttgart.de/09e133ce-2e99-ae92-45fb-1d0477f80508
<https://uni-stuttgart.de/09e133ce-2e99-ae92-45fb-1d0477f80508> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Line ;
		:BH.oM.Geometry.Line.Start <https://uni-stuttgart.de/9122a364-241e-1401-0b9f-5aad34c982a8> ;
		:BH.oM.Geometry.Line.End <https://uni-stuttgart.de/0592028f-d2ce-999d-2d11-91e05c67738e> ;
		:BH.oM.Geometry.Line.Infinite "False"^^xsd:boolean .


### https://uni-stuttgart.de/9122a364-241e-1401-0b9f-5aad34c982a8
<https://uni-stuttgart.de/9122a364-241e-1401-0b9f-5aad34c982a8> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-1.41062338852248"^^xsd:double;
		:BH.oM.Geometry.Point.Y "4.59145136893341"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/0592028f-d2ce-999d-2d11-91e05c67738e
<https://uni-stuttgart.de/0592028f-d2ce-999d-2d11-91e05c67738e> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-1.41062338852248"^^xsd:double;
		:BH.oM.Geometry.Point.Y "2.76145136862858"^^xsd:double;
		:BH.oM.Geometry.Point.Z "1"^^xsd:double .


### https://uni-stuttgart.de/e0bb1765-74da-6acc-1f59-452e29f5a7ff
<https://uni-stuttgart.de/e0bb1765-74da-6acc-1f59-452e29f5a7ff> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Line ;
		:BH.oM.Geometry.Line.Start <https://uni-stuttgart.de/0592028f-d2ce-999d-2d11-91e05c67738e> ;
		:BH.oM.Geometry.Line.End <https://uni-stuttgart.de/c5826be7-586d-352b-fdf9-b3486fc91c92> ;
		:BH.oM.Geometry.Line.Infinite "False"^^xsd:boolean .


### https://uni-stuttgart.de/c5826be7-586d-352b-fdf9-b3486fc91c92
<https://uni-stuttgart.de/c5826be7-586d-352b-fdf9-b3486fc91c92> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-1.41062338852248"^^xsd:double;
		:BH.oM.Geometry.Point.Y "2.76145136862858"^^xsd:double;
		:BH.oM.Geometry.Point.Z "4"^^xsd:double .


### https://uni-stuttgart.de/68205cc2-5517-4ecb-21a0-40849eef35c2
<https://uni-stuttgart.de/68205cc2-5517-4ecb-21a0-40849eef35c2> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Line ;
		:BH.oM.Geometry.Line.Start <https://uni-stuttgart.de/c5826be7-586d-352b-fdf9-b3486fc91c92> ;
		:BH.oM.Geometry.Line.End <https://uni-stuttgart.de/8886ea81-124d-695b-aff1-37ea560b4500> ;
		:BH.oM.Geometry.Line.Infinite "False"^^xsd:boolean .


### https://uni-stuttgart.de/8886ea81-124d-695b-aff1-37ea560b4500
<https://uni-stuttgart.de/8886ea81-124d-695b-aff1-37ea560b4500> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-1.41062338852248"^^xsd:double;
		:BH.oM.Geometry.Point.Y "4.59145136893341"^^xsd:double;
		:BH.oM.Geometry.Point.Z "4"^^xsd:double .


### https://uni-stuttgart.de/61819389-fb27-ffc5-4f31-966d86cf53f7
<https://uni-stuttgart.de/61819389-fb27-ffc5-4f31-966d86cf53f7> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Line ;
		:BH.oM.Geometry.Line.Start <https://uni-stuttgart.de/8886ea81-124d-695b-aff1-37ea560b4500> ;
		:BH.oM.Geometry.Line.End <https://uni-stuttgart.de/9122a364-241e-1401-0b9f-5aad34c982a8> ;
		:BH.oM.Geometry.Line.Infinite "False"^^xsd:boolean .


### https://uni-stuttgart.de/8886ea81-124d-695b-aff1-37ea560b4500
<https://uni-stuttgart.de/8886ea81-124d-695b-aff1-37ea560b4500> rdf:type owl:NamedIndividual ,
		:BH.oM.Geometry.Point ;
		:BH.oM.Geometry.Point.X "-1.41062338852248"^^xsd:double;
		:BH.oM.Geometry.Point.Y "4.59145136893341"^^xsd:double;
		:BH.oM.Geometry.Point.Z "4"^^xsd:double .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/070880df-1d75-4f2b-b686-791a0b936713
<https://uni-stuttgart.de/070880df-1d75-4f2b-b686-791a0b936713> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.IOpening.Location <https://uni-stuttgart.de/3a94cc6c-dbd6-3df0-1c22-5eeae79a1d6b> ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "070880df-1d75-4f2b-b686-791a0b936713"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/52e5ec32-c2a6-4b18-ba74-3ba4b68bc12b
<https://uni-stuttgart.de/52e5ec32-c2a6-4b18-ba74-3ba4b68bc12b> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "52e5ec32-c2a6-4b18-ba74-3ba4b68bc12b"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments "ew0KICAiJHR5cGUiOiAiQkguRW5naW5lLkFkYXB0ZXJzLlJERi5Db252ZXJ0K1R5cGVXcmFwcGVyYDFbW0JILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb01dXSwgUkRGX0VuZ2luZSIsDQogICJWYWx1ZSI6IHsNCiAgICAiJHR5cGUiOiAiQkgub00uQmFzZS5GcmFnbWVudFNldCwgQkhvTSIsDQogICAgIiR2YWx1ZXMiOiBbDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0SWRlbnRpZmllcnMsIFJldml0X29NIiwNCiAgICAgICAgIlBlcnNpc3RlbnRJZCI6ICJiM2Q3OGM1OC02ZDJiLTRjODEtOTQzZC03MDFmNjFkYjc3YWMtMDAwMDMxNDMiLA0KICAgICAgICAiRWxlbWVudElkIjogMTI2MTEsDQogICAgICAgICJDYXRlZ29yeU5hbWUiOiAiQ3VydGFpbiBQYW5lbHMiLA0KICAgICAgICAiRmFtaWx5TmFtZSI6ICJTeXN0ZW0gUGFuZWwiLA0KICAgICAgICAiRmFtaWx5VHlwZU5hbWUiOiAiR2xhemVkIiwNCiAgICAgICAgIkZhbWlseVR5cGVJZCI6IDEyNjExLA0KICAgICAgICAiV29ya3NldCI6ICIiLA0KICAgICAgICAiT3duZXJWaWV3SWQiOiAtMSwNCiAgICAgICAgIlBhcmVudEVsZW1lbnRJZCI6IC0xLA0KICAgICAgICAiTGlua0RvY3VtZW50IjogIiINCiAgICAgIH0sDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UHVsbGVkUGFyYW1ldGVycywgUmV2aXRfb00iLA0KICAgICAgICAiUGFyYW1ldGVycyI6IHsNCiAgICAgICAgICAiJHR5cGUiOiAiU3lzdGVtLkNvbGxlY3Rpb25zLk9iamVjdE1vZGVsLlJlYWRPbmx5Q29sbGVjdGlvbmAxW1tCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTV1dLCBtc2NvcmxpYiIsDQogICAgICAgICAgIiR2YWx1ZXMiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgTWFyayIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBOdW1iZXIiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAiIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVmaW5lIFRoZXJtYWwgUHJvcGVydGllcyBieSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJTY2hlbWF0aWMgVHlwZSIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkFuYWx5dGljIENvbnN0cnVjdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIxLzggaW4gUGlsa2luZ3RvbiBzaW5nbGUgZ2xhemluZyIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkZpbmlzaCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1hdGVyaWFsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMjYsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkNvbnN0cnVjdGlvbiBUeXBlIElkIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIkdTUDRSIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVVJMIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29zdCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiTWFudWZhY3R1cmVyIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiS2V5bm90ZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJIMTEiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJWaXN1YWwgTGlnaHQgVHJhbnNtaXR0YW5jZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuOSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVGhlcm1hbCBSZXNpc3RhbmNlIChSKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMTQ5MTAwMTgwNDExMjE4MzEsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlRoaWNrbmVzcyIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMDI1MDAwMDAwMDAwMDAwMDA1LA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBEZXNjcmlwdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJIZWF0IFRyYW5zZmVyIENvZWZmaWNpZW50IChVKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDYuNzA2OSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiU29sYXIgSGVhdCBHYWluIENvZWZmaWNpZW50IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC44NiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVzY3JpcHRpb24iLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJDb25zdHJ1Y3Rpb24gVHlwZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgSW1hZ2UiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAtMSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29kZSBOYW1lIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgQ29tbWVudHMiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBDb2RlIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1vZGVsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiT2Zmc2V0IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC4wMzcsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBUaXRsZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiQkhvTV9HdWlkIjogImIzNTY3YTUwLTk1OTctNGM1MC1hNTQ2LWY1MzIyMGRhM2JlNyIsDQogICAgICAgICJOYW1lIjogIiIsDQogICAgICAgICJGcmFnbWVudHMiOiB7DQogICAgICAgICAgIiR0eXBlIjogIkJILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb00iLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIlRhZ3MiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkhhc2hTZXRgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdXSwgU3lzdGVtLkNvcmUiLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIkN1c3RvbURhdGEiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlgMltbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdLFtTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYl1dLCBtc2NvcmxpYiINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIF0NCiAgfQ0KfQ=="^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/699f8f6e-b251-48bd-a46d-2b4b7500680d
<https://uni-stuttgart.de/699f8f6e-b251-48bd-a46d-2b4b7500680d> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "699f8f6e-b251-48bd-a46d-2b4b7500680d"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/b343af5a-868e-41f4-a58c-592412aa61aa
<https://uni-stuttgart.de/b343af5a-868e-41f4-a58c-592412aa61aa> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "b343af5a-868e-41f4-a58c-592412aa61aa"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments "ew0KICAiJHR5cGUiOiAiQkguRW5naW5lLkFkYXB0ZXJzLlJERi5Db252ZXJ0K1R5cGVXcmFwcGVyYDFbW0JILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb01dXSwgUkRGX0VuZ2luZSIsDQogICJWYWx1ZSI6IHsNCiAgICAiJHR5cGUiOiAiQkgub00uQmFzZS5GcmFnbWVudFNldCwgQkhvTSIsDQogICAgIiR2YWx1ZXMiOiBbDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0SWRlbnRpZmllcnMsIFJldml0X29NIiwNCiAgICAgICAgIlBlcnNpc3RlbnRJZCI6ICJiM2Q3OGM1OC02ZDJiLTRjODEtOTQzZC03MDFmNjFkYjc3YWMtMDAwMDMxNDMiLA0KICAgICAgICAiRWxlbWVudElkIjogMTI2MTEsDQogICAgICAgICJDYXRlZ29yeU5hbWUiOiAiQ3VydGFpbiBQYW5lbHMiLA0KICAgICAgICAiRmFtaWx5TmFtZSI6ICJTeXN0ZW0gUGFuZWwiLA0KICAgICAgICAiRmFtaWx5VHlwZU5hbWUiOiAiR2xhemVkIiwNCiAgICAgICAgIkZhbWlseVR5cGVJZCI6IDEyNjExLA0KICAgICAgICAiV29ya3NldCI6ICIiLA0KICAgICAgICAiT3duZXJWaWV3SWQiOiAtMSwNCiAgICAgICAgIlBhcmVudEVsZW1lbnRJZCI6IC0xLA0KICAgICAgICAiTGlua0RvY3VtZW50IjogIiINCiAgICAgIH0sDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UHVsbGVkUGFyYW1ldGVycywgUmV2aXRfb00iLA0KICAgICAgICAiUGFyYW1ldGVycyI6IHsNCiAgICAgICAgICAiJHR5cGUiOiAiU3lzdGVtLkNvbGxlY3Rpb25zLk9iamVjdE1vZGVsLlJlYWRPbmx5Q29sbGVjdGlvbmAxW1tCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTV1dLCBtc2NvcmxpYiIsDQogICAgICAgICAgIiR2YWx1ZXMiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgTWFyayIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBOdW1iZXIiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAiIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVmaW5lIFRoZXJtYWwgUHJvcGVydGllcyBieSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJTY2hlbWF0aWMgVHlwZSIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkFuYWx5dGljIENvbnN0cnVjdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIxLzggaW4gUGlsa2luZ3RvbiBzaW5nbGUgZ2xhemluZyIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkZpbmlzaCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1hdGVyaWFsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMjYsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkNvbnN0cnVjdGlvbiBUeXBlIElkIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIkdTUDRSIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVVJMIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29zdCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiTWFudWZhY3R1cmVyIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiS2V5bm90ZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJIMTEiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJWaXN1YWwgTGlnaHQgVHJhbnNtaXR0YW5jZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuOSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVGhlcm1hbCBSZXNpc3RhbmNlIChSKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMTQ5MTAwMTgwNDExMjE4MzEsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlRoaWNrbmVzcyIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMDI1MDAwMDAwMDAwMDAwMDA1LA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBEZXNjcmlwdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJIZWF0IFRyYW5zZmVyIENvZWZmaWNpZW50IChVKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDYuNzA2OSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiU29sYXIgSGVhdCBHYWluIENvZWZmaWNpZW50IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC44NiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVzY3JpcHRpb24iLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJDb25zdHJ1Y3Rpb24gVHlwZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgSW1hZ2UiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAtMSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29kZSBOYW1lIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgQ29tbWVudHMiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBDb2RlIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1vZGVsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiT2Zmc2V0IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC4wMzcsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBUaXRsZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiQkhvTV9HdWlkIjogImIzNTY3YTUwLTk1OTctNGM1MC1hNTQ2LWY1MzIyMGRhM2JlNyIsDQogICAgICAgICJOYW1lIjogIiIsDQogICAgICAgICJGcmFnbWVudHMiOiB7DQogICAgICAgICAgIiR0eXBlIjogIkJILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb00iLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIlRhZ3MiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkhhc2hTZXRgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdXSwgU3lzdGVtLkNvcmUiLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIkN1c3RvbURhdGEiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlgMltbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdLFtTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYl1dLCBtc2NvcmxpYiINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIF0NCiAgfQ0KfQ=="^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/1534277f-78ec-45aa-8f1a-1e77b823c20e
<https://uni-stuttgart.de/1534277f-78ec-45aa-8f1a-1e77b823c20e> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "1534277f-78ec-45aa-8f1a-1e77b823c20e"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments "ew0KICAiJHR5cGUiOiAiQkguRW5naW5lLkFkYXB0ZXJzLlJERi5Db252ZXJ0K1R5cGVXcmFwcGVyYDFbW0JILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb01dXSwgUkRGX0VuZ2luZSIsDQogICJWYWx1ZSI6IHsNCiAgICAiJHR5cGUiOiAiQkgub00uQmFzZS5GcmFnbWVudFNldCwgQkhvTSIsDQogICAgIiR2YWx1ZXMiOiBbDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0SWRlbnRpZmllcnMsIFJldml0X29NIiwNCiAgICAgICAgIlBlcnNpc3RlbnRJZCI6ICJiM2Q3OGM1OC02ZDJiLTRjODEtOTQzZC03MDFmNjFkYjc3YWMtMDAwMDMxNDMiLA0KICAgICAgICAiRWxlbWVudElkIjogMTI2MTEsDQogICAgICAgICJDYXRlZ29yeU5hbWUiOiAiQ3VydGFpbiBQYW5lbHMiLA0KICAgICAgICAiRmFtaWx5TmFtZSI6ICJTeXN0ZW0gUGFuZWwiLA0KICAgICAgICAiRmFtaWx5VHlwZU5hbWUiOiAiR2xhemVkIiwNCiAgICAgICAgIkZhbWlseVR5cGVJZCI6IDEyNjExLA0KICAgICAgICAiV29ya3NldCI6ICIiLA0KICAgICAgICAiT3duZXJWaWV3SWQiOiAtMSwNCiAgICAgICAgIlBhcmVudEVsZW1lbnRJZCI6IC0xLA0KICAgICAgICAiTGlua0RvY3VtZW50IjogIiINCiAgICAgIH0sDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UHVsbGVkUGFyYW1ldGVycywgUmV2aXRfb00iLA0KICAgICAgICAiUGFyYW1ldGVycyI6IHsNCiAgICAgICAgICAiJHR5cGUiOiAiU3lzdGVtLkNvbGxlY3Rpb25zLk9iamVjdE1vZGVsLlJlYWRPbmx5Q29sbGVjdGlvbmAxW1tCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTV1dLCBtc2NvcmxpYiIsDQogICAgICAgICAgIiR2YWx1ZXMiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgTWFyayIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBOdW1iZXIiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAiIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVmaW5lIFRoZXJtYWwgUHJvcGVydGllcyBieSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJTY2hlbWF0aWMgVHlwZSIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkFuYWx5dGljIENvbnN0cnVjdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIxLzggaW4gUGlsa2luZ3RvbiBzaW5nbGUgZ2xhemluZyIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkZpbmlzaCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1hdGVyaWFsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMjYsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkNvbnN0cnVjdGlvbiBUeXBlIElkIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIkdTUDRSIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVVJMIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29zdCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiTWFudWZhY3R1cmVyIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiS2V5bm90ZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJIMTEiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJWaXN1YWwgTGlnaHQgVHJhbnNtaXR0YW5jZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuOSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVGhlcm1hbCBSZXNpc3RhbmNlIChSKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMTQ5MTAwMTgwNDExMjE4MzEsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlRoaWNrbmVzcyIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMDI1MDAwMDAwMDAwMDAwMDA1LA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBEZXNjcmlwdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJIZWF0IFRyYW5zZmVyIENvZWZmaWNpZW50IChVKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDYuNzA2OSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiU29sYXIgSGVhdCBHYWluIENvZWZmaWNpZW50IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC44NiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVzY3JpcHRpb24iLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJDb25zdHJ1Y3Rpb24gVHlwZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgSW1hZ2UiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAtMSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29kZSBOYW1lIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgQ29tbWVudHMiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBDb2RlIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1vZGVsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiT2Zmc2V0IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC4wMzcsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBUaXRsZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiQkhvTV9HdWlkIjogImIzNTY3YTUwLTk1OTctNGM1MC1hNTQ2LWY1MzIyMGRhM2JlNyIsDQogICAgICAgICJOYW1lIjogIiIsDQogICAgICAgICJGcmFnbWVudHMiOiB7DQogICAgICAgICAgIiR0eXBlIjogIkJILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb00iLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIlRhZ3MiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkhhc2hTZXRgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdXSwgU3lzdGVtLkNvcmUiLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIkN1c3RvbURhdGEiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlgMltbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdLFtTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYl1dLCBtc2NvcmxpYiINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIF0NCiAgfQ0KfQ=="^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/99d86fa8-1915-4a6c-ad76-7850c81e51eb
<https://uni-stuttgart.de/99d86fa8-1915-4a6c-ad76-7850c81e51eb> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "99d86fa8-1915-4a6c-ad76-7850c81e51eb"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/f5dac12e-6fe6-4e23-8fc6-564ad9155ce1
<https://uni-stuttgart.de/f5dac12e-6fe6-4e23-8fc6-564ad9155ce1> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "f5dac12e-6fe6-4e23-8fc6-564ad9155ce1"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/8618c285-39af-468c-bc39-fe350a669bc1
<https://uni-stuttgart.de/8618c285-39af-468c-bc39-fe350a669bc1> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "8618c285-39af-468c-bc39-fe350a669bc1"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/979f6923-20ec-4e21-8e06-d0fc9affd847
<https://uni-stuttgart.de/979f6923-20ec-4e21-8e06-d0fc9affd847> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "979f6923-20ec-4e21-8e06-d0fc9affd847"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/b8fb8807-8321-4ddc-ae59-b5549b1a99f6
<https://uni-stuttgart.de/b8fb8807-8321-4ddc-ae59-b5549b1a99f6> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "b8fb8807-8321-4ddc-ae59-b5549b1a99f6"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/30e51108-5df3-4255-b4d7-c8945ec237d5
<https://uni-stuttgart.de/30e51108-5df3-4255-b4d7-c8945ec237d5> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "30e51108-5df3-4255-b4d7-c8945ec237d5"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments "ew0KICAiJHR5cGUiOiAiQkguRW5naW5lLkFkYXB0ZXJzLlJERi5Db252ZXJ0K1R5cGVXcmFwcGVyYDFbW0JILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb01dXSwgUkRGX0VuZ2luZSIsDQogICJWYWx1ZSI6IHsNCiAgICAiJHR5cGUiOiAiQkgub00uQmFzZS5GcmFnbWVudFNldCwgQkhvTSIsDQogICAgIiR2YWx1ZXMiOiBbDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0SWRlbnRpZmllcnMsIFJldml0X29NIiwNCiAgICAgICAgIlBlcnNpc3RlbnRJZCI6ICJiM2Q3OGM1OC02ZDJiLTRjODEtOTQzZC03MDFmNjFkYjc3YWMtMDAwMDMxNDMiLA0KICAgICAgICAiRWxlbWVudElkIjogMTI2MTEsDQogICAgICAgICJDYXRlZ29yeU5hbWUiOiAiQ3VydGFpbiBQYW5lbHMiLA0KICAgICAgICAiRmFtaWx5TmFtZSI6ICJTeXN0ZW0gUGFuZWwiLA0KICAgICAgICAiRmFtaWx5VHlwZU5hbWUiOiAiR2xhemVkIiwNCiAgICAgICAgIkZhbWlseVR5cGVJZCI6IDEyNjExLA0KICAgICAgICAiV29ya3NldCI6ICIiLA0KICAgICAgICAiT3duZXJWaWV3SWQiOiAtMSwNCiAgICAgICAgIlBhcmVudEVsZW1lbnRJZCI6IC0xLA0KICAgICAgICAiTGlua0RvY3VtZW50IjogIiINCiAgICAgIH0sDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UHVsbGVkUGFyYW1ldGVycywgUmV2aXRfb00iLA0KICAgICAgICAiUGFyYW1ldGVycyI6IHsNCiAgICAgICAgICAiJHR5cGUiOiAiU3lzdGVtLkNvbGxlY3Rpb25zLk9iamVjdE1vZGVsLlJlYWRPbmx5Q29sbGVjdGlvbmAxW1tCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTV1dLCBtc2NvcmxpYiIsDQogICAgICAgICAgIiR2YWx1ZXMiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgTWFyayIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBOdW1iZXIiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAiIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVmaW5lIFRoZXJtYWwgUHJvcGVydGllcyBieSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJTY2hlbWF0aWMgVHlwZSIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkFuYWx5dGljIENvbnN0cnVjdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIxLzggaW4gUGlsa2luZ3RvbiBzaW5nbGUgZ2xhemluZyIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkZpbmlzaCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1hdGVyaWFsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMjYsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkNvbnN0cnVjdGlvbiBUeXBlIElkIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIkdTUDRSIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVVJMIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29zdCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiTWFudWZhY3R1cmVyIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiS2V5bm90ZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJIMTEiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJWaXN1YWwgTGlnaHQgVHJhbnNtaXR0YW5jZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuOSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVGhlcm1hbCBSZXNpc3RhbmNlIChSKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMTQ5MTAwMTgwNDExMjE4MzEsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlRoaWNrbmVzcyIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMDI1MDAwMDAwMDAwMDAwMDA1LA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBEZXNjcmlwdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJIZWF0IFRyYW5zZmVyIENvZWZmaWNpZW50IChVKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDYuNzA2OSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiU29sYXIgSGVhdCBHYWluIENvZWZmaWNpZW50IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC44NiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVzY3JpcHRpb24iLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJDb25zdHJ1Y3Rpb24gVHlwZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgSW1hZ2UiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAtMSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29kZSBOYW1lIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgQ29tbWVudHMiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBDb2RlIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1vZGVsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiT2Zmc2V0IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC4wMzcsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBUaXRsZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiQkhvTV9HdWlkIjogImIzNTY3YTUwLTk1OTctNGM1MC1hNTQ2LWY1MzIyMGRhM2JlNyIsDQogICAgICAgICJOYW1lIjogIiIsDQogICAgICAgICJGcmFnbWVudHMiOiB7DQogICAgICAgICAgIiR0eXBlIjogIkJILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb00iLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIlRhZ3MiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkhhc2hTZXRgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdXSwgU3lzdGVtLkNvcmUiLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIkN1c3RvbURhdGEiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlgMltbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdLFtTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYl1dLCBtc2NvcmxpYiINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIF0NCiAgfQ0KfQ=="^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/a1fba114-8aef-411a-afa3-f76e87b3ba04
<https://uni-stuttgart.de/a1fba114-8aef-411a-afa3-f76e87b3ba04> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "a1fba114-8aef-411a-afa3-f76e87b3ba04"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/e36208a0-1a08-42c2-9353-f8750c1ca4bf
<https://uni-stuttgart.de/e36208a0-1a08-42c2-9353-f8750c1ca4bf> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "e36208a0-1a08-42c2-9353-f8750c1ca4bf"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/3e8618e8-1c15-4e74-87be-0f345c3ec609
<https://uni-stuttgart.de/3e8618e8-1c15-4e74-87be-0f345c3ec609> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "3e8618e8-1c15-4e74-87be-0f345c3ec609"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/1164aeb2-4a59-4b57-8ef1-691b744e158b
<https://uni-stuttgart.de/1164aeb2-4a59-4b57-8ef1-691b744e158b> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "1164aeb2-4a59-4b57-8ef1-691b744e158b"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments "ew0KICAiJHR5cGUiOiAiQkguRW5naW5lLkFkYXB0ZXJzLlJERi5Db252ZXJ0K1R5cGVXcmFwcGVyYDFbW0JILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb01dXSwgUkRGX0VuZ2luZSIsDQogICJWYWx1ZSI6IHsNCiAgICAiJHR5cGUiOiAiQkgub00uQmFzZS5GcmFnbWVudFNldCwgQkhvTSIsDQogICAgIiR2YWx1ZXMiOiBbDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0SWRlbnRpZmllcnMsIFJldml0X29NIiwNCiAgICAgICAgIlBlcnNpc3RlbnRJZCI6ICJiM2Q3OGM1OC02ZDJiLTRjODEtOTQzZC03MDFmNjFkYjc3YWMtMDAwMDMxNDMiLA0KICAgICAgICAiRWxlbWVudElkIjogMTI2MTEsDQogICAgICAgICJDYXRlZ29yeU5hbWUiOiAiQ3VydGFpbiBQYW5lbHMiLA0KICAgICAgICAiRmFtaWx5TmFtZSI6ICJTeXN0ZW0gUGFuZWwiLA0KICAgICAgICAiRmFtaWx5VHlwZU5hbWUiOiAiR2xhemVkIiwNCiAgICAgICAgIkZhbWlseVR5cGVJZCI6IDEyNjExLA0KICAgICAgICAiV29ya3NldCI6ICIiLA0KICAgICAgICAiT3duZXJWaWV3SWQiOiAtMSwNCiAgICAgICAgIlBhcmVudEVsZW1lbnRJZCI6IC0xLA0KICAgICAgICAiTGlua0RvY3VtZW50IjogIiINCiAgICAgIH0sDQogICAgICB7DQogICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UHVsbGVkUGFyYW1ldGVycywgUmV2aXRfb00iLA0KICAgICAgICAiUGFyYW1ldGVycyI6IHsNCiAgICAgICAgICAiJHR5cGUiOiAiU3lzdGVtLkNvbGxlY3Rpb25zLk9iamVjdE1vZGVsLlJlYWRPbmx5Q29sbGVjdGlvbmAxW1tCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTV1dLCBtc2NvcmxpYiIsDQogICAgICAgICAgIiR2YWx1ZXMiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgTWFyayIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBOdW1iZXIiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAiIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVmaW5lIFRoZXJtYWwgUHJvcGVydGllcyBieSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJTY2hlbWF0aWMgVHlwZSIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkFuYWx5dGljIENvbnN0cnVjdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIxLzggaW4gUGlsa2luZ3RvbiBzaW5nbGUgZ2xhemluZyIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkZpbmlzaCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1hdGVyaWFsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMjYsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIkNvbnN0cnVjdGlvbiBUeXBlIElkIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIkdTUDRSIiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVVJMIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29zdCIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiTWFudWZhY3R1cmVyIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiS2V5bm90ZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICJIMTEiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJWaXN1YWwgTGlnaHQgVHJhbnNtaXR0YW5jZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuOSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiVGhlcm1hbCBSZXNpc3RhbmNlIChSKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMTQ5MTAwMTgwNDExMjE4MzEsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlRoaWNrbmVzcyIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDAuMDI1MDAwMDAwMDAwMDAwMDA1LA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBEZXNjcmlwdGlvbiIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJIZWF0IFRyYW5zZmVyIENvZWZmaWNpZW50IChVKSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IDYuNzA2OSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiU29sYXIgSGVhdCBHYWluIENvZWZmaWNpZW50IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC44NiwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiRGVzY3JpcHRpb24iLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJDb25zdHJ1Y3Rpb24gVHlwZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6IG51bGwsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgSW1hZ2UiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiAtMSwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiQ29kZSBOYW1lIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIlR5cGUgQ29tbWVudHMiLA0KICAgICAgICAgICAgICAiVmFsdWUiOiBudWxsLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUmV2aXQuUGFyYW1ldGVycy5SZXZpdFBhcmFtZXRlciwgUmV2aXRfb00iLA0KICAgICAgICAgICAgICAiTmFtZSI6ICJBc3NlbWJseSBDb2RlIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogIiIsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk1vZGVsIiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogbnVsbCwNCiAgICAgICAgICAgICAgIlVuaXRUeXBlIjogbnVsbCwNCiAgICAgICAgICAgICAgIklzUmVhZE9ubHkiOiBmYWxzZQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIiR0eXBlIjogIkJILm9NLkFkYXB0ZXJzLlJldml0LlBhcmFtZXRlcnMuUmV2aXRQYXJhbWV0ZXIsIFJldml0X29NIiwNCiAgICAgICAgICAgICAgIk5hbWUiOiAiT2Zmc2V0IiwNCiAgICAgICAgICAgICAgIlZhbHVlIjogMC4wMzcsDQogICAgICAgICAgICAgICJVbml0VHlwZSI6IG51bGwsDQogICAgICAgICAgICAgICJJc1JlYWRPbmx5IjogZmFsc2UNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICIkdHlwZSI6ICJCSC5vTS5BZGFwdGVycy5SZXZpdC5QYXJhbWV0ZXJzLlJldml0UGFyYW1ldGVyLCBSZXZpdF9vTSIsDQogICAgICAgICAgICAgICJOYW1lIjogIk9tbmlDbGFzcyBUaXRsZSIsDQogICAgICAgICAgICAgICJWYWx1ZSI6ICIiLA0KICAgICAgICAgICAgICAiVW5pdFR5cGUiOiBudWxsLA0KICAgICAgICAgICAgICAiSXNSZWFkT25seSI6IGZhbHNlDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9LA0KICAgICAgICAiQkhvTV9HdWlkIjogImIzNTY3YTUwLTk1OTctNGM1MC1hNTQ2LWY1MzIyMGRhM2JlNyIsDQogICAgICAgICJOYW1lIjogIiIsDQogICAgICAgICJGcmFnbWVudHMiOiB7DQogICAgICAgICAgIiR0eXBlIjogIkJILm9NLkJhc2UuRnJhZ21lbnRTZXQsIEJIb00iLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIlRhZ3MiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkhhc2hTZXRgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdXSwgU3lzdGVtLkNvcmUiLA0KICAgICAgICAgICIkdmFsdWVzIjogW10NCiAgICAgICAgfSwNCiAgICAgICAgIkN1c3RvbURhdGEiOiB7DQogICAgICAgICAgIiR0eXBlIjogIlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlgMltbU3lzdGVtLlN0cmluZywgbXNjb3JsaWJdLFtTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYl1dLCBtc2NvcmxpYiINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIF0NCiAgfQ0KfQ=="^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/8efbc659-1194-44f0-b827-d7cf1cef4cd9
<https://uni-stuttgart.de/8efbc659-1194-44f0-b827-d7cf1cef4cd9> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "8efbc659-1194-44f0-b827-d7cf1cef4cd9"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/f6d40cca-a71c-495d-973c-2eba1c301c47
<https://uni-stuttgart.de/f6d40cca-a71c-495d-973c-2eba1c301c47> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "f6d40cca-a71c-495d-973c-2eba1c301c47"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/2a0ab2d7-9f67-4b66-be45-28303f69a2f5
<https://uni-stuttgart.de/2a0ab2d7-9f67-4b66-be45-28303f69a2f5> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "2a0ab2d7-9f67-4b66-be45-28303f69a2f5"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/0bdadfb1-bd77-4504-8d75-0b6fbca8e458
<https://uni-stuttgart.de/0bdadfb1-bd77-4504-8d75-0b6fbca8e458> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "0bdadfb1-bd77-4504-8d75-0b6fbca8e458"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/a238987d-ca80-4c75-8253-35440c48efd1
<https://uni-stuttgart.de/a238987d-ca80-4c75-8253-35440c48efd1> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Elements.Window ;
		:BH.oM.Physical.Elements.Window.Construction <https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "a238987d-ca80-4c75-8253-35440c48efd1"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string .


### https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528
<https://uni-stuttgart.de/57827652-1a9e-4855-8db6-75a9fefcd528> rdf:type owl:NamedIndividual ,
		:BH.oM.Physical.Constructions.Construction ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "57827652-1a9e-4855-8db6-75a9fefcd528"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "System Panel: Glazed"^^xsd:string;
		:BH.oM.Base.BHoMObject.Fragments ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/032b983d-1ba3-40e6-91fd-b4fc334612fa
<https://uni-stuttgart.de/032b983d-1ba3-40e6-91fd-b4fc334612fa> rdf:type owl:NamedIndividual ,
		:BH.oM.Architecture.Elements.Room ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "032b983d-1ba3-40e6-91fd-b4fc334612fa"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "MachineryLab"^^xsd:string .


### https://uni-stuttgart.de/69c924cf-6683-40a0-92fd-8b481c68e771
<https://uni-stuttgart.de/69c924cf-6683-40a0-92fd-8b481c68e771> rdf:type owl:NamedIndividual ,
		:ArchitecturalBuilding ;
		:BH.oM.Base.IBHoMObject.BHoM_Guid "69c924cf-6683-40a0-92fd-8b481c68e771"^^xsd:string;
		:BH.oM.Base.IBHoMObject.CustomData ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized;
		:ArchitecturalBuilding.hasLevel rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/9b3a1483-3733-4978-9edd-f10e54aa5ba8> ;
		rdf:_1 <https://uni-stuttgart.de/68dfa492-0096-482f-8eb8-dc7dd250616d> ;

		:ArchitecturalBuilding.hasColumn rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/55f65444-4e36-464a-aa3f-f8fbdf463e3e> ;
		rdf:_1 <https://uni-stuttgart.de/9bfc8f09-17d6-4bbe-aa47-02bc1bc7db80> ;
		rdf:_2 <https://uni-stuttgart.de/6673ba52-5544-4380-acbd-340ab27eaf8c> ;
		rdf:_3 <https://uni-stuttgart.de/8b8995a9-7f85-4648-bdcb-67e2827dbf01> ;
		rdf:_4 <https://uni-stuttgart.de/a63baa61-174b-4682-b703-2016d42136cf> ;
		rdf:_5 <https://uni-stuttgart.de/4a0744e2-e8d2-414c-a4c9-7cc90c5dadff> ;
		rdf:_6 <https://uni-stuttgart.de/d047ecb3-b779-4949-93d3-6e5a0697a2f2> ;
		rdf:_7 <https://uni-stuttgart.de/b7124ee7-9968-4f26-9929-3039c57bf052> ;
		rdf:_8 <https://uni-stuttgart.de/1e801823-716c-48c0-8124-e07671876aa1> ;
		rdf:_9 <https://uni-stuttgart.de/b6a6b231-ca5c-4a4f-b01e-9908182a940d> ;
		rdf:_10 <https://uni-stuttgart.de/598450b1-4abb-405c-9f9c-4f17ce2559df> ;
		rdf:_11 <https://uni-stuttgart.de/6936a2ec-37f7-4cb9-b955-c88e858a218b> ;

		:ArchitecturalBuilding.hasFloor rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/648e53ef-f1f8-407f-b77b-03c3d8ab2c28> ;
		rdf:_1 <https://uni-stuttgart.de/c4ea6bbd-afde-45c2-be37-9b79a2414b95> ;

		:ArchitecturalBuilding.hasWall rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/a8923450-ea55-49fe-8731-9bacea9e8cbc> ;
		rdf:_1 <https://uni-stuttgart.de/77e58f0f-c0e8-40f8-9165-74769e42487f> ;
		rdf:_2 <https://uni-stuttgart.de/1f2fc931-e30c-4229-97f7-e92d51fac069> ;
		rdf:_3 <https://uni-stuttgart.de/9494970d-fa4c-448f-a78a-f35c964fb4f3> ;

		:ArchitecturalBuilding.hasWindow rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/070880df-1d75-4f2b-b686-791a0b936713> ;
		rdf:_1 <https://uni-stuttgart.de/52e5ec32-c2a6-4b18-ba74-3ba4b68bc12b> ;
		rdf:_2 <https://uni-stuttgart.de/699f8f6e-b251-48bd-a46d-2b4b7500680d> ;
		rdf:_3 <https://uni-stuttgart.de/b343af5a-868e-41f4-a58c-592412aa61aa> ;
		rdf:_4 <https://uni-stuttgart.de/1534277f-78ec-45aa-8f1a-1e77b823c20e> ;
		rdf:_5 <https://uni-stuttgart.de/99d86fa8-1915-4a6c-ad76-7850c81e51eb> ;
		rdf:_6 <https://uni-stuttgart.de/f5dac12e-6fe6-4e23-8fc6-564ad9155ce1> ;
		rdf:_7 <https://uni-stuttgart.de/8618c285-39af-468c-bc39-fe350a669bc1> ;
		rdf:_8 <https://uni-stuttgart.de/979f6923-20ec-4e21-8e06-d0fc9affd847> ;
		rdf:_9 <https://uni-stuttgart.de/b8fb8807-8321-4ddc-ae59-b5549b1a99f6> ;
		rdf:_10 <https://uni-stuttgart.de/30e51108-5df3-4255-b4d7-c8945ec237d5> ;
		rdf:_11 <https://uni-stuttgart.de/a1fba114-8aef-411a-afa3-f76e87b3ba04> ;
		rdf:_12 <https://uni-stuttgart.de/e36208a0-1a08-42c2-9353-f8750c1ca4bf> ;
		rdf:_13 <https://uni-stuttgart.de/3e8618e8-1c15-4e74-87be-0f345c3ec609> ;
		rdf:_14 <https://uni-stuttgart.de/1164aeb2-4a59-4b57-8ef1-691b744e158b> ;
		rdf:_15 <https://uni-stuttgart.de/8efbc659-1194-44f0-b827-d7cf1cef4cd9> ;
		rdf:_16 <https://uni-stuttgart.de/f6d40cca-a71c-495d-973c-2eba1c301c47> ;
		rdf:_17 <https://uni-stuttgart.de/2a0ab2d7-9f67-4b66-be45-28303f69a2f5> ;
		rdf:_18 <https://uni-stuttgart.de/0bdadfb1-bd77-4504-8d75-0b6fbca8e458> ;
		rdf:_19 <https://uni-stuttgart.de/a238987d-ca80-4c75-8253-35440c48efd1> ;

		:ArchitecturalBuilding.hasRoom <https://uni-stuttgart.de/032b983d-1ba3-40e6-91fd-b4fc334612fa>  .


### https://uni-stuttgart.de/7d4bce85-53f5-49e9-a983-61a4cb154e9d
<https://uni-stuttgart.de/7d4bce85-53f5-49e9-a983-61a4cb154e9d> rdf:type owl:NamedIndividual ,
		:ArchitecturalBuilding ;
		:ArchitecturalBuilding.hasLevel rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/9b3a1483-3733-4978-9edd-f10e54aa5ba8> ;
		rdf:_1 <https://uni-stuttgart.de/68dfa492-0096-482f-8eb8-dc7dd250616d> ;

		:ArchitecturalBuilding.hasColumn rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/55f65444-4e36-464a-aa3f-f8fbdf463e3e> ;
		rdf:_1 <https://uni-stuttgart.de/9bfc8f09-17d6-4bbe-aa47-02bc1bc7db80> ;
		rdf:_2 <https://uni-stuttgart.de/6673ba52-5544-4380-acbd-340ab27eaf8c> ;
		rdf:_3 <https://uni-stuttgart.de/8b8995a9-7f85-4648-bdcb-67e2827dbf01> ;
		rdf:_4 <https://uni-stuttgart.de/a63baa61-174b-4682-b703-2016d42136cf> ;
		rdf:_5 <https://uni-stuttgart.de/4a0744e2-e8d2-414c-a4c9-7cc90c5dadff> ;
		rdf:_6 <https://uni-stuttgart.de/d047ecb3-b779-4949-93d3-6e5a0697a2f2> ;
		rdf:_7 <https://uni-stuttgart.de/b7124ee7-9968-4f26-9929-3039c57bf052> ;
		rdf:_8 <https://uni-stuttgart.de/1e801823-716c-48c0-8124-e07671876aa1> ;
		rdf:_9 <https://uni-stuttgart.de/b6a6b231-ca5c-4a4f-b01e-9908182a940d> ;
		rdf:_10 <https://uni-stuttgart.de/598450b1-4abb-405c-9f9c-4f17ce2559df> ;
		rdf:_11 <https://uni-stuttgart.de/6936a2ec-37f7-4cb9-b955-c88e858a218b> ;

		:ArchitecturalBuilding.hasFloor rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/648e53ef-f1f8-407f-b77b-03c3d8ab2c28> ;
		rdf:_1 <https://uni-stuttgart.de/c4ea6bbd-afde-45c2-be37-9b79a2414b95> ;

		:ArchitecturalBuilding.hasWall rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/a8923450-ea55-49fe-8731-9bacea9e8cbc> ;
		rdf:_1 <https://uni-stuttgart.de/77e58f0f-c0e8-40f8-9165-74769e42487f> ;
		rdf:_2 <https://uni-stuttgart.de/1f2fc931-e30c-4229-97f7-e92d51fac069> ;
		rdf:_3 <https://uni-stuttgart.de/9494970d-fa4c-448f-a78a-f35c964fb4f3> ;

		:ArchitecturalBuilding.hasWindow rdf:Seq ;
		rdf:_0 <https://uni-stuttgart.de/070880df-1d75-4f2b-b686-791a0b936713> ;
		rdf:_1 <https://uni-stuttgart.de/52e5ec32-c2a6-4b18-ba74-3ba4b68bc12b> ;
		rdf:_2 <https://uni-stuttgart.de/699f8f6e-b251-48bd-a46d-2b4b7500680d> ;
		rdf:_3 <https://uni-stuttgart.de/b343af5a-868e-41f4-a58c-592412aa61aa> ;
		rdf:_4 <https://uni-stuttgart.de/1534277f-78ec-45aa-8f1a-1e77b823c20e> ;
		rdf:_5 <https://uni-stuttgart.de/99d86fa8-1915-4a6c-ad76-7850c81e51eb> ;
		rdf:_6 <https://uni-stuttgart.de/f5dac12e-6fe6-4e23-8fc6-564ad9155ce1> ;
		rdf:_7 <https://uni-stuttgart.de/8618c285-39af-468c-bc39-fe350a669bc1> ;
		rdf:_8 <https://uni-stuttgart.de/979f6923-20ec-4e21-8e06-d0fc9affd847> ;
		rdf:_9 <https://uni-stuttgart.de/b8fb8807-8321-4ddc-ae59-b5549b1a99f6> ;
		rdf:_10 <https://uni-stuttgart.de/30e51108-5df3-4255-b4d7-c8945ec237d5> ;
		rdf:_11 <https://uni-stuttgart.de/a1fba114-8aef-411a-afa3-f76e87b3ba04> ;
		rdf:_12 <https://uni-stuttgart.de/e36208a0-1a08-42c2-9353-f8750c1ca4bf> ;
		rdf:_13 <https://uni-stuttgart.de/3e8618e8-1c15-4e74-87be-0f345c3ec609> ;
		rdf:_14 <https://uni-stuttgart.de/1164aeb2-4a59-4b57-8ef1-691b744e158b> ;
		rdf:_15 <https://uni-stuttgart.de/8efbc659-1194-44f0-b827-d7cf1cef4cd9> ;
		rdf:_16 <https://uni-stuttgart.de/f6d40cca-a71c-495d-973c-2eba1c301c47> ;
		rdf:_17 <https://uni-stuttgart.de/2a0ab2d7-9f67-4b66-be45-28303f69a2f5> ;
		rdf:_18 <https://uni-stuttgart.de/0bdadfb1-bd77-4504-8d75-0b6fbca8e458> ;
		rdf:_19 <https://uni-stuttgart.de/a238987d-ca80-4c75-8253-35440c48efd1> ;

		:ArchitecturalBuilding.hasRoom <https://uni-stuttgart.de/38cc03ef-1c57-4552-9f9f-5559eb11038a> ;
		:BH.oM.Base.IBHoMObject.BHoM_Guid "7d4bce85-53f5-49e9-a983-61a4cb154e9d"^^xsd:string;
		:BH.oM.Base.IBHoMObject.CustomData ""^^:BH.oM.Adapters.RDF.Base64JsonSerialized .


### https://uni-stuttgart.de/38cc03ef-1c57-4552-9f9f-5559eb11038a
<https://uni-stuttgart.de/38cc03ef-1c57-4552-9f9f-5559eb11038a> rdf:type owl:NamedIndividual ,
		:BH.oM.Architecture.Elements.Room ;
		:BH.oM.Base.BHoMObject.BHoM_Guid "38cc03ef-1c57-4552-9f9f-5559eb11038a"^^xsd:string;
		:BH.oM.Base.BHoMObject.Name "EntranceHall"^^xsd:string .


#################################################################
#    Footer
#################################################################

# GraphSettings: ew0KICAiJHR5cGUiOiAiQkguRW5naW5lLkFkYXB0ZXJzLlJERi5Db252ZXJ0K1R5cGVXcmFwcGVyYDFbW0JILm9NLkFkYXB0ZXJzLlJERi5HcmFwaFNldHRpbmdzLCBSREZfb01dXSwgUkRGX0VuZ2luZSIsDQogICJWYWx1ZSI6IHsNCiAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUkRGLkdyYXBoU2V0dGluZ3MsIFJERl9vTSIsDQogICAgIk9udG9sb2d5VGl0bGUiOiAiVGltYmVyIEJ1bGRpbmcgT250b2xvZ3kiLA0KICAgICJPbnRvbG9neURlc2NyaXB0aW9uIjogIlRpbWJlciBCdWxkaW5nIE9udG9sb2d5IiwNCiAgICAiT250b2xvZ3lCYXNlQWRkcmVzcyI6ICJodHRwczovL3NjaGVtYS5vcmciLA0KICAgICJUQm94U2V0dGluZ3MiOiB7DQogICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUkRGLlRCb3hTZXR0aW5ncywgUkRGX29NIiwNCiAgICAgICJDdXN0b21PYmplY3RUeXBlc0Jhc2VBZGRyZXNzIjogImh0dHBzOi8vc2NoZW1hLm9yZyIsDQogICAgICAiVHlwZVVyaXMiOiB7DQogICAgICAgICIkdHlwZSI6ICJTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5YDJbW1N5c3RlbS5UeXBlLCBtc2NvcmxpYl0sW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliXV0sIG1zY29ybGliIg0KICAgICAgfSwNCiAgICAgICJEZWZhdWx0QmFzZVVyaUZvclVua25vd25UeXBlcyI6ICJodHRwOi8vY3VzdG9taXplRnJvbS1PbnRvbG9neVNldHRpbmdzLlRCb3hTZXR0aW5ncy5EZWZhdWx0QmFzZVVyaUZvclVua25vd25UeXBlcyIsDQogICAgICAiVHJlYXRDdXN0b21PYmplY3RzV2l0aFR5cGVLZXlBc0N1c3RvbU9iamVjdFR5cGVzIjogdHJ1ZSwNCiAgICAgICJDdXN0b21vYmplY3RzVHlwZUtleSI6ICJUeXBlIiwNCiAgICAgICJHZW9tZXRyeUFzT250b2xvZ3lDbGFzcyI6IHRydWUNCiAgICB9LA0KICAgICJBQm94U2V0dGluZ3MiOiB7DQogICAgICAiJHR5cGUiOiAiQkgub00uQWRhcHRlcnMuUkRGLkFCb3hTZXR0aW5ncywgUkRGX29NIiwNCiAgICAgICJJbmRpdmlkdWFsc0Jhc2VBZGRyZXNzIjogImh0dHBzOi8vdW5pLXN0dXR0Z2FydC5kZSIsDQogICAgICAiQ29uc2lkZXJOdWxsT3JFbXB0eVByb3BlcnR5VmFsdWVzIjogZmFsc2UNCiAgICB9DQogIH0NCn0=
